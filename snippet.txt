{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "intinput": {
        "prefix": "inti",
        "body": [
            "int(input())"
        ],
        "description": "intinputする"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for i in range(${1:}):"
        ],
        "description": "for文"
    },
    "mapinput": {
        "prefix": "mai",
        "body": [
            "map(int,input().split())"
        ],
        "description": "mapinputする"
    },
    "listinput": {
        "prefix": "lisi",
        "body": [
            "list(map(int,input().split()))"
        ],
        "description": "listinputする"
    },
    "input": {
        "prefix": "input()",
        "body": [
            "input()"
        ],
        "description": "inputする"
    },
    "print": {
        "prefix": "print",
        "body": [
            "print(${1:})"
        ],
        "description": "print"
    },
    "ma": {
        "prefix": "wrong",
        "body": [
            "'''",
            "　 ∧_,,∧    究極奥義「WAがACになーれ！！」",
            "　（`・ω・)つ━☆・*。",
            "　⊂　　 ノ 　　　・゜+.",
            "　 し’´Ｊ　　*・ ",
            "'''",
            "import sys",
            "input = sys.stdin.readline",
        ],
        "description": "おまじない"
    },
    "lim": {
        "prefix": "lim",
        "body": [
            "import sys",
            "sys.setrecursionlimit(1000000000)",
            "input = sys.stdin.readline",
        ],
        "description": "再帰するとき"
    },
    "ki": {
        "prefix": "ki",
        "body": [
            "import sys",
            "sys.setrecursionlimit(1000000000)",
            "input = sys.stdin.readline",
            "n=int(input())",
            "es=[[] for i in range(n)]",
            "for i in range(n-1):",
            "   a,b=map(int,input().split())",
            "   es[a-1].append(b-1)",
            "   es[b-1].append(a-1)",
            "def dfs(v):",
            "    ${1:}",
            "    return",
        ],
        "description": "木の入力"
    },
    "heapq": {
        "prefix": "heapq",
        "body": [
            "from heapq import heappush,heapify,heappop",
        ],
        "description": "優先度付きキュー"
    },
    "Counter": {
        "prefix": "counter",
        "body": [
            "from collections import Counter",
        ],
        "description": "Counter"
    },
    "itertools": {
        "prefix": "itertools",
        "body": [
            "from itertools import permutations, combinations",
        ],
        "description": "順列, 組合せを生成"
    },
    "bisect": {
        "prefix": "bisect",
        "body": [
            "from bisect import bisect_left ,bisect_right",
            "#bisect_left(a,x):a[i]>=xとなるような最小のi.",
            "#昇順ソートされたリストaに昇順を崩さずxを挿入できる位置s(0-index)を返す.",
            "#a=[1,3,5,7,9,11,13,15,17,19]",
            "#s = bisect_left(a,4)",
            "#s=2",
        ],
        "description": "lower_bound"
    },
    "deque": {
        "prefix": "deque",
        "body": [
            "from collections import deque ",
        ],
        "description": "deque"
    },
    "key": {
        "prefix": "key",
        "body": [
            "key=lambda x:x[${1:}]",
        ],
        "description": "ソートのkeyを指定"
    },
    "math": {
        "prefix": "math",
        "body": [
            "from math import comb, factorial, gcd, isqrt, perm, exp, log, log2, log10, sqrt, pi, acos, asin, atan ,atan2, cos, sin, tan",
            "from functools import reduce",
            "def gcd_list(numbers):",
            "   return reduce(gcd, numbers)",
            "def lcm(x, y):",
            "   return (x * y) // gcd(x, y)",
            "def lcm_list(numbers):",
            "   return reduce(lcm, numbers, 1)",
        ],
        "description": "math いっぱい ver3.8以降"
    },
    "numpy": {
        "prefix": "numpy",
        "body": [
            "import numpy as np",
        ],
        "description": "numpy"
    },
    "shousuu": {
        "prefix": "shousuu",
        "body": [
            "print('{:.15f}'.format(${1:})) # 小数第15桁まで表示",
        ],
        "description": "ソートのkeyを指定"
    },
    "lru_cache": {
        "prefix": "lru_cache",
        "body": [
            "from functools import lru_cache",
            "@lru_cache(None)",
        ],
        "description": "メモ化再帰"
    },
    "defaultdict": {
        "prefix": "defaultdict",
        "body": [
            "from collections import defaultdict",
            "# d = defaultdict(int)で0で初期化",
            "# d = defaultdict(lambda: 100)で100で初期化",
        ],
        "description": "辞書"
    },
    "decimal": {
        "prefix": "decimal",
        "body": [
            "from decimal import Decimal,getcontext",
            "getcontext().prec = 100 # 標準は28,精度を調節",
        ],
        "description": "decimal"
    },
    "matplotlib": {
        "prefix": "matplotlib",
        "body": [
            "import matplotlib.pylab as plt",
        ],
        "description": "matplotlib"
    },
    "random": {
        "prefix": "random",
        "body": [
            "from random import randint",
        ],
        "description": "random"
    },
}