{
	"intinput": {
		"prefix": "inti",
		"body": [
			"int(input())"
		],
		"description": "intinputする"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for i in range(${1:}):"
		],
		"description": "for文"
	},
	"mapinput": {
		"prefix": "mai",
		"body": [
			"map(int, input().split())"
		],
		"description": "mapinputする"
	},
	"listinput": {
		"prefix": "lisi",
		"body": [
			"list(map(int, input().split()))"
		],
		"description": "listinputする"
	},
	"input": {
		"prefix": "input()",
		"body": [
			"input()"
		],
		"description": "inputする"
	},
	"print": {
		"prefix": "print",
		"body": [
			"print(${1:})"
		],
		"description": "print"
	},
	"ma": {
		"prefix": "omazinai",
		"body": [
			"import os",
			"import io",
			"input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline"
		],
		"description": "おまじない"
	},
	"lim": {
		"prefix": "lim",
		"body": [
			"import sys",
			"sys.setrecursionlimit(10000000)",
			"input = sys.stdin.readline"
		],
		"description": "再帰するとき"
	},
	"ki": {
		"prefix": "ki",
		"body": [
			"import sys",
			"sys.setrecursionlimit(1000000000)",
			"input = sys.stdin.readline",
			"n = int(input())",
			"es = [[] for i in range(n)]",
			"for i in range(n - 1):",
			"   a, b = map(int, input().split())",
			"   es[a - 1].append(b - 1)",
			"   es[b - 1].append(a - 1)",
			"def dfs(v):",
			"    ${1:}",
			"    return"
		],
		"description": "木の入力"
	},
	"heapq": {
		"prefix": "heapq",
		"body": [
			"from heapq import heappush,heapify,heappop"
		],
		"description": "優先度付きキュー"
	},
	"Counter": {
		"prefix": "counter",
		"body": [
			"from collections import Counter"
		],
		"description": "Counter"
	},
	"itertools": {
		"prefix": "itertools",
		"body": [
			"from itertools import permutations, combinations"
		],
		"description": "順列, 組合せを生成"
	},
	"bisect": {
		"prefix": "bisect",
		"body": [
			"from bisect import bisect_left ,bisect_right",
			"#bisect_left(a,x):a[i]>=xとなるような最小のi.",
			"#昇順ソートされたリストaに昇順を崩さずxを挿入できる位置s(0-index)を返す.",
			"#a=[1,3,5,7,9,11,13,15,17,19]",
			"#s = bisect_left(a,4)",
			"#s=2"
		],
		"description": "lower_bound"
	},
	"deque": {
		"prefix": "deque",
		"body": [
			"from collections import deque "
		],
		"description": "deque"
	},
	"key": {
		"prefix": "key",
		"body": [
			"key=lambda x:x[${1:}]"
		],
		"description": "ソートのkeyを指定"
	},
	"math": {
		"prefix": "math",
		"body": [
			"from math import comb, factorial, gcd, isqrt, perm, exp, log, log2, log10, sqrt, pi, acos, asin, atan ,atan2, cos, sin, tan",
			"from functools import reduce",
			"def gcd_list(numbers):",
			"   return reduce(gcd, numbers)",
			"def lcm(x, y):",
			"   return (x * y) // gcd(x, y)",
			"def lcm_list(numbers):",
			"   return reduce(lcm, numbers, 1)"
		],
		"description": "math いっぱい ver3.8以降"
	},
	"numpy": {
		"prefix": "numpy",
		"body": [
			"import numpy as np"
		],
		"description": "numpy"
	},
	"shousuu": {
		"prefix": "shousuu",
		"body": [
			"print('{:.15f}'.format(${1:})) # 小数第15桁まで表示"
		],
		"description": "ソートのkeyを指定"
	},
	"lru_cache": {
		"prefix": "lru_cache",
		"body": [
			"from functools import lru_cache",
			"@lru_cache(None)"
		],
		"description": "メモ化再帰"
	},
	"defaultdict": {
		"prefix": "defaultdict",
		"body": [
			"from collections import defaultdict",
			"# d = defaultdict(int)で0で初期化",
			"# d = defaultdict(lambda: 100)で100で初期化"
		],
		"description": "辞書"
	},
	"decimal": {
		"prefix": "decimal",
		"body": [
			"from decimal import Decimal,getcontext",
			"getcontext().prec = 100 # 標準は28,精度を調節"
		],
		"description": "decimal"
	},
	"matplotlib": {
		"prefix": "matplotlib",
		"body": [
			"import matplotlib.pylab as plt"
		],
		"description": "matplotlib"
	},
	"random": {
		"prefix": "random",
		"body": [
			"from random import randint"
		],
		"description": "random"
	},
	"numba": {
		"prefix": "numba",
		"body": [
			"from numba import jit, i8, void, b1, u1, f8",
			"# i8:int, void:void, b1:bool, u1:string, f8:float, i8[:]:int配列, f8[:,:]:float二次元配列",
			"@jit(${1:}(${2:}))"
		],
		"description": "numba"
	},
	"marathon": {
		"prefix": "marathon",
		"body": [
			"import sys",
			"from random import randint",
			"from time import time",
			"start = time()",
			"sys.setrecursionlimit(10000000)",
			"input = sys.stdin.readline",
			"def eval_score():",
			"",
			"    return ",
			""
		],
		"description": "marathon"
	},
	"main": {
		"prefix": "main",
		"body": [
			"if __name__ == '__main__':"
		],
		"description": "main"
	},
	"mathpypy": {
		"prefix": "mathpypy",
		"body": [
			"from math import factorial, gcd, exp, log, log2, log10, sqrt, pi, acos, asin, atan ,atan2, cos, sin, tan",
			"from functools import reduce",
			"def gcd_list(numbers):",
			"   return reduce(gcd, numbers)",
			"def lcm(x, y):",
			"   return (x * y) // gcd(x, y)",
			"def lcm_list(numbers):",
			"   return reduce(lcm, numbers, 1)"
		],
		"description": "mathpypy"
	},
	"time": {
		"prefix": "time",
		"body": [
			"from time import time",
			"start = time()"
		],
		"description": "time"
	},
	"True": {
		"prefix": "ture",
		"body": "True",
		"description": "True"
	},
	"False": {
		"prefix": "false",
		"body": "False",
		"description": "False"
	},
	"deepcopy": {
		"prefix": "deepcopy",
		"body": "from copy import copy, deepcopy",
		"description": "deepcopy"
	},
	"LIS": {
		"prefix": "LIS",
		"body": "# seqの単調増加列の長さ\r\n# パラメータ wider_sense:False=狭義(<), True:広義(<=)\r\n\r\ndef LIS(seq, wider_sense=False):\r\n    from bisect import bisect_left, bisect_right\r\n    f = bisect_right if wider_sense else bisect_left\r\n    N = len(seq)\r\n    INF = 1000000000000000000\r\n    dp = [INF] * (N+1)\r\n    for x in seq:\r\n        dp[f(dp, x)] = x\r\n    return f(dp, INF - 1)",
		"description": "最長共通部分列"
	},
	"Segment Tree": {
		"prefix": "Segment",
		"body": "# Segment Tree\r\nclass Segment:\r\n    def __init__(self, N, init_val, segfunc, identity_element):\r\n        \"\"\"\r\n        segfunc : min, +, *, xor, gcd など\r\n        identity_element : 単位元(min:inf, 和:0, 積:1, xor:0, gcd:0)\r\n        \"\"\"\r\n        self.segfunc = segfunc\r\n        self.identity_element = identity_element\r\n        self.N0 = 2 ** (N - 1).bit_length()\r\n        # 0-indexedで管理\r\n        self.dat = [self.identity_element] * (2 * self.N0)\r\n\r\n        # 値を代入\r\n        for i in range(N):\r\n            self.dat[i + self.N0 - 1] = init_val[i]\r\n        # 構築\r\n        for i in range(self.N0 - 2, -1, -1):\r\n            self.dat[i] = self.segfunc(self.dat[2 * i + 1], self.dat[2 * i + 2])\r\n\r\n    # k番目の要素の値をxに変更\r\n    def update(self, k, x):\r\n        k += self.N0 - 1\r\n        self.dat[k] = x\r\n        while k >= 0:\r\n            k = (k - 1) // 2\r\n            self.dat[k] = self.segfunc(self.dat[2 * k + 1], self.dat[2 * k + 2])\r\n\r\n    # 区間[l,r)の最小値を求める\r\n    def query(self, l, r):\r\n        L = l + self.N0\r\n        R = r + self.N0\r\n        s = self.identity_element\r\n        # 区間を列挙しながら最小値などをを求める\r\n        while L < R:\r\n            if R & 1:\r\n                R -= 1\r\n                s = self.segfunc(s, self.dat[R - 1])\r\n            if L & 1:\r\n                s = self.segfunc(s, self.dat[L - 1])\r\n                L += 1\r\n            L >>= 1\r\n            R >>= 1\r\n        return s\r\n\r\n\r\n",
		"description": "Segment Tree"
	},
	"Union-Find": {
		"prefix": "unionfind",
		"body": "class UnionFind:\r\n    __slots__ = [\"N\", \"root\"]\r\n\r\n    def __init__(self, N):\r\n        \"\"\"\r\n        N:要素数\r\n        root:各要素の親要素の番号を格納するリスト.\r\n             ただし, root[x] < 0 ならその頂点が根で-root[x]が木の要素数.\r\n        \"\"\"\r\n        self.N = N\r\n        self.root = [-1] * N\r\n\r\n    def __repr__(self):\r\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\r\n\r\n    def find(self, x):\r\n        \"\"\"頂点xの根を見つける\"\"\"\r\n        r = x\r\n        while self.root[r] >= 0:\r\n            r = self.root[r]\r\n\r\n        while self.root[x] >= 0:\r\n            self.root[x], x = r, self.root[x]\r\n\r\n        return r\r\n\r\n    def union(self, x, y):\r\n        \"\"\"x, yが属する木をunion\"\"\"\r\n        x = self.find(x)\r\n        y = self.find(y)\r\n        if x == y:\r\n            return\r\n        elif self.root[y] < self.root[x]:\r\n            x, y = y, x\r\n        self.root[x] += self.root[y]\r\n        self.root[y] = x\r\n\r\n    def same(self, x, y):\r\n        \"\"\"xとyが同じグループに属するかどうか\"\"\"\r\n        return self.find(x) == self.find(y)\r\n\r\n    def count(self, x):\r\n        \"\"\"頂点xが属する木のサイズを返す\"\"\"\r\n        return - self.root[self.find(x)]\r\n\r\n    def members(self, x):\r\n        \"\"\"xが属する木の要素を列挙\"\"\"\r\n        _root = self.find(x)\r\n        return [i for i in range(self.N) if self.find(i) == _root]\r\n\r\n    def roots(self):\r\n        \"\"\"森の根を列挙\"\"\"\r\n        return [i for i, x in enumerate(self.root) if x < 0]\r\n\r\n    def group_count(self):\r\n        \"\"\"連結成分の数\"\"\"\r\n        return len(self.roots())\r\n\r\n    def all_group_members(self):\r\n        \"\"\"{ルート要素: [そのグループに含まれる要素のリスト], ...}の辞書を返す\"\"\"\r\n        groups = {r: [] for r in self.roots()}\r\n        for i in range(self.N):\r\n            groups[self.find(i)].append(i)\r\n        return groups\r\n\r\n\r\n\r\n",
		"description": "Union-Find"
	},
	"組み合わせ": {
		"prefix": "combination",
		"body": "#テーブル作るやつ 前処理:O(n*log(mod)), comb(n, k):O(1)\r\n\r\nmod = 10**9+7 #998244353 # 変える\r\ndef table():\r\n    k = 2 * 10 ** 5 + 5  # 変える\r\n    fac = [1] * k\r\n    finv = [1] * k\r\n    inv = [0] * k\r\n    inv[1] = 1\r\n    for i in range(2, k):\r\n        fac[i] = fac[i - 1] * i % mod\r\n        inv[i] = mod - inv[mod % i] * (mod // i) % mod\r\n        finv[i] = finv[i - 1] * inv[i] % mod\r\n    return fac, finv\r\nfac, finv = table()\r\ndef comb(n, k):\r\n    if n < k:\r\n        return 0\r\n    if n < 0 or k < 0:\r\n        return 0\r\n    return fac[n] * (finv[k] * finv[n - k] % mod) % mod",
		"description": "mod組み合わせ"
	},
	"Binary_Indexed_Tree": {
		"prefix": "BIT",
		"body": "class Binary_Indexed_Tree:\r\n    def __init__(self, n):\r\n        \"\"\"\r\n        :param n: 最大の要素数\r\n        \"\"\"\r\n        self.n = n\r\n        self.tree = [0] * (n + 1)\r\n        self.depth = n.bit_length() - 1\r\n \r\n    def sum(self, i):\r\n        \"\"\" 区間[0,i) の総和を求める \"\"\"\r\n        s = 0\r\n        i -= 1\r\n        while i >= 0:\r\n            s += self.tree[i]\r\n            i = (i & (i + 1) )- 1\r\n        return s\r\n \r\n    def built(self, array):\r\n        \"\"\" array を初期値とするBITを構築 \"\"\"\r\n        for i, a in enumerate(array):\r\n            self.add(i, a)\r\n \r\n    def add(self, i, x):\r\n        \"\"\" i 番目の要素に x を足す \"\"\"\r\n        while i < self.n:\r\n            self.tree[i] += x\r\n            i |= i + 1\r\n \r\n    def get(self, i, j):\r\n        \"\"\" 部分区間和 [i, j) \"\"\"\r\n        if i == 0:\r\n            return self.sum(j)\r\n        return self.sum(j) - self.sum(i)\r\n \r\n    def lower_bound(self, x, equal=False):\r\n        \"\"\" (a0+a1+...+ai < x となる最大の i, その時の a0+a1+...+ai )\r\n             a0+a1+...+ai <= x としたい場合は equal = True\r\n             二分探索であるため、ai>=0 を満たす必要がある\"\"\"\r\n        sum_ = 0\r\n        pos = -1  # 1-indexed の時は pos = 0\r\n        if equal:\r\n            for i in range(self.depth, -1, -1):\r\n                k = pos + (1 << i)\r\n                if k < self.n and sum_ + self.tree[k] <= x: # 1-indexed の時は k <= self.n\r\n                    sum_ += self.tree[k]\r\n                    pos += 1 << i\r\n        else:\r\n            for i in range(self.depth, -1, -1):\r\n                k = pos + (1 << i)\r\n                if k < self.n and sum_ + self.tree[k] < x:  # 1-indexed の時は k <= self.n\r\n                    sum_ += self.tree[k]\r\n                    pos += 1 << i\r\n\r\n        return pos, sum_\r\n \r\n    def __getitem__(self, i):\r\n        \"\"\" [a0, a1, a2, ...] \"\"\"\r\n        return self.get(i, i+1)\r\n \r\n    def __iter__(self):\r\n        \"\"\" [a0, a1, a2, ...] \"\"\"\r\n        for i in range(self.n):\r\n            yield self.get(i, i+1)\r\n \r\n    def __str__(self):\r\n        text1 = \" \".join([\"element:            \"] + list(map(str, self)))\r\n        text2 = \" \".join([\"cumsum(1-indexed):  \"] + list(str(self.sum(i)) for i in range(1, self.n + 1)))\r\n        return \"\\n\".join((text1, text2))\r\n\r\n\r\n",
		"description": "Binary_Indexed_Tree"
	},
	"Sorted List Set Dict": {
		"prefix": "SortedList",
		"body": "# SortedList(), SortedSet(), SortedDict() があるよ.\r\n\"\"\"Sorted List\r\n==============\r\n:doc:`Sorted Containers<index>` is an Apache2 licensed Python sorted\r\ncollections library, written in pure-Python, and fast as C-extensions. The\r\n:doc:`introduction<introduction>` is the best way to get started.\r\nSorted list implementations:\r\n.. currentmodule:: sortedcontainers\r\n* :class:`SortedList`\r\n* :class:`SortedKeyList`\r\n\"\"\"\r\nfrom __future__ import print_function\r\nimport sys\r\nimport traceback\r\nfrom bisect import bisect_left, bisect_right, insort\r\nfrom itertools import chain, repeat, starmap\r\nfrom math import log\r\nfrom operator import add, eq, ne, gt, ge, lt, le, iadd\r\nfrom textwrap import dedent\r\nfrom collections.abc import Sequence, MutableSequence, ItemsView, KeysView, ValuesView, MutableSet, Set\r\nfrom functools import wraps, reduce\r\nfrom _thread import get_ident\r\n\r\n\r\ndef recursive_repr(fillvalue='...'):\r\n    \"Decorator to make a repr function return fillvalue for a recursive call.\"\r\n    # pylint: disable=missing-docstring\r\n    # Copied from reprlib in Python 3\r\n    # https://hg.python.org/cpython/file/3.6/Lib/reprlib.py\r\n\r\n    def decorating_function(user_function):\r\n        repr_running = set()\r\n\r\n        @wraps(user_function)\r\n        def wrapper(self):\r\n            key = id(self), get_ident()\r\n            if key in repr_running:\r\n                return fillvalue\r\n            repr_running.add(key)\r\n            try:\r\n                result = user_function(self)\r\n            finally:\r\n                repr_running.discard(key)\r\n            return result\r\n\r\n        return wrapper\r\n\r\n    return decorating_function\r\n\r\n###############################################################################\r\n# END Python 2/3 Shims\r\n###############################################################################\r\n\r\n\r\nclass SortedList(MutableSequence):\r\n    \"\"\"Sorted list is a sorted mutable sequence.\r\n    Sorted list values are maintained in sorted order.\r\n    Sorted list values must be comparable. The total ordering of values must\r\n    not change while they are stored in the sorted list.\r\n    Methods for adding values:\r\n    * :func:`SortedList.add`\r\n    * :func:`SortedList.update`\r\n    * :func:`SortedList.__add__`\r\n    * :func:`SortedList.__iadd__`\r\n    * :func:`SortedList.__mul__`\r\n    * :func:`SortedList.__imul__`\r\n    Methods for removing values:\r\n    * :func:`SortedList.clear`\r\n    * :func:`SortedList.discard`\r\n    * :func:`SortedList.remove`\r\n    * :func:`SortedList.pop`\r\n    * :func:`SortedList.__delitem__`\r\n    Methods for looking up values:\r\n    * :func:`SortedList.bisect_left`\r\n    * :func:`SortedList.bisect_right`\r\n    * :func:`SortedList.count`\r\n    * :func:`SortedList.index`\r\n    * :func:`SortedList.__contains__`\r\n    * :func:`SortedList.__getitem__`\r\n    Methods for iterating values:\r\n    * :func:`SortedList.irange`\r\n    * :func:`SortedList.islice`\r\n    * :func:`SortedList.__iter__`\r\n    * :func:`SortedList.__reversed__`\r\n    Methods for miscellany:\r\n    * :func:`SortedList.copy`\r\n    * :func:`SortedList.__len__`\r\n    * :func:`SortedList.__repr__`\r\n    * :func:`SortedList._check`\r\n    * :func:`SortedList._reset`\r\n    Sorted lists use lexicographical ordering semantics when compared to other\r\n    sequences.\r\n    Some methods of mutable sequences are not supported and will raise\r\n    not-implemented error.\r\n    \"\"\"\r\n    DEFAULT_LOAD_FACTOR = 1000\r\n\r\n    def __init__(self, iterable=None, key=None):\r\n        \"\"\"Initialize sorted list instance.\r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted list.\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> sl = SortedList()\r\n        >>> sl\r\n        SortedList([])\r\n        >>> sl = SortedList([3, 1, 2, 5, 4])\r\n        >>> sl\r\n        SortedList([1, 2, 3, 4, 5])\r\n        :param iterable: initial values (optional)\r\n        \"\"\"\r\n        assert key is None\r\n        self._len = 0\r\n        self._load = self.DEFAULT_LOAD_FACTOR\r\n        self._lists = []\r\n        self._maxes = []\r\n        self._index = []\r\n        self._offset = 0\r\n\r\n        if iterable is not None:\r\n            self._update(iterable)\r\n\r\n    def __new__(cls, iterable=None, key=None):\r\n        \"\"\"Create new sorted list or sorted-key list instance.\r\n        Optional `key`-function argument will return an instance of subtype\r\n        :class:`SortedKeyList`.\r\n        >>> sl = SortedList()\r\n        >>> isinstance(sl, SortedList)\r\n        True\r\n        >>> sl = SortedList(key=lambda x: -x)\r\n        >>> isinstance(sl, SortedList)\r\n        True\r\n        >>> isinstance(sl, SortedKeyList)\r\n        True\r\n        :param iterable: initial values (optional)\r\n        :param key: function used to extract comparison key (optional)\r\n        :return: sorted list or sorted-key list instance\r\n        \"\"\"\r\n        # pylint: disable=unused-argument\r\n        if key is None:\r\n            return object.__new__(cls)\r\n        else:\r\n            if cls is SortedList:\r\n                return object.__new__(SortedKeyList)\r\n            else:\r\n                raise TypeError('inherit SortedKeyList for key argument')\r\n\r\n    @property\r\n    def key(self):  # pylint: disable=useless-return\r\n        \"\"\"Function used to extract comparison key from values.\r\n        Sorted list compares values directly so the key function is none.\r\n        \"\"\"\r\n        return None\r\n\r\n    def _reset(self, load):\r\n        \"\"\"Reset sorted list load factor.\r\n        The `load` specifies the load-factor of the list. The default load\r\n        factor of 1000 works well for lists from tens to tens-of-millions of\r\n        values. Good practice is to use a value that is the cube root of the\r\n        list size. With billions of elements, the best load factor depends on\r\n        your usage. It's best to leave the load factor at the default until you\r\n        start benchmarking.\r\n        See :doc:`implementation` and :doc:`performance-scale` for more\r\n        information.\r\n        Runtime complexity: `O(n)`\r\n        :param int load: load-factor for sorted list sublists\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        self._clear()\r\n        self._load = load\r\n        self._update(values)\r\n\r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted list.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        self._len = 0\r\n        del self._lists[:]\r\n        del self._maxes[:]\r\n        del self._index[:]\r\n        self._offset = 0\r\n\r\n    _clear = clear\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList()\r\n        >>> sl.add(3)\r\n        >>> sl.add(1)\r\n        >>> sl.add(2)\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n        :param value: value to add to sorted list\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n\r\n        if _maxes:\r\n            pos = bisect_right(_maxes, value)\r\n\r\n            if pos == len(_maxes):\r\n                pos -= 1\r\n                _lists[pos].append(value)\r\n                _maxes[pos] = value\r\n            else:\r\n                insort(_lists[pos], value)\r\n\r\n            self._expand(pos)\r\n        else:\r\n            _lists.append([value])\r\n            _maxes.append(value)\r\n\r\n        self._len += 1\r\n\r\n    def _expand(self, pos):\r\n        \"\"\"Split sublists with length greater than double the load-factor.\r\n        Updates the index when the sublist length is less than double the load\r\n        level. This requires incrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n        \"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _index = self._index\r\n\r\n        if len(_lists[pos]) > (_load << 1):\r\n            _maxes = self._maxes\r\n\r\n            _lists_pos = _lists[pos]\r\n            half = _lists_pos[_load:]\r\n            del _lists_pos[_load:]\r\n            _maxes[pos] = _lists_pos[-1]\r\n\r\n            _lists.insert(pos + 1, half)\r\n            _maxes.insert(pos + 1, half[-1])\r\n\r\n            del _index[:]\r\n        else:\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child:\r\n                    _index[child] += 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] += 1\r\n\r\n    def update(self, iterable):\r\n        \"\"\"Update sorted list by adding all values from `iterable`.\r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n        >>> sl = SortedList()\r\n        >>> sl.update([3, 1, 2])\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n        :param iterable: iterable of values to add\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        values = sorted(iterable)\r\n\r\n        if _maxes:\r\n            if len(values) * 4 >= self._len:\r\n                values.extend(chain.from_iterable(_lists))\r\n                values.sort()\r\n                self._clear()\r\n            else:\r\n                _add = self.add\r\n                for val in values:\r\n                    _add(val)\r\n                return\r\n\r\n        _load = self._load\r\n        _lists.extend(values[pos:(pos + _load)]\r\n                      for pos in range(0, len(values), _load))\r\n        _maxes.extend(sublist[-1] for sublist in _lists)\r\n        self._len = len(values)\r\n        del self._index[:]\r\n\r\n    _update = update\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\r\n        ``sl.__contains__(value)`` <==> ``value in sl``\r\n        Runtime complexity: `O(log(n))`\r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> 3 in sl\r\n        True\r\n        :param value: search for value in sorted list\r\n        :return: true if `value` in sorted list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return False\r\n\r\n        pos = bisect_left(_maxes, value)\r\n\r\n        if pos == len(_maxes):\r\n            return False\r\n\r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n\r\n        return _lists[pos][idx] == value\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\r\n        If `value` is not a member, do nothing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.discard(5)\r\n        >>> sl.discard(0)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n        :param value: `value` to discard from sorted list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return\r\n\r\n        pos = bisect_left(_maxes, value)\r\n\r\n        if pos == len(_maxes):\r\n            return\r\n\r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n\r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\r\n        If `value` is not a member, raise ValueError.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.remove(5)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n        >>> sl.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 not in list\r\n        :param value: `value` to remove from sorted list\r\n        :raises ValueError: if `value` is not in sorted list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n        pos = bisect_left(_maxes, value)\r\n\r\n        if pos == len(_maxes):\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n\r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n        else:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\r\n        Combines lists that are less than half the load level.\r\n        Updates the index when the sublist length is more than half the load\r\n        level. This requires decrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        _index = self._index\r\n\r\n        _lists_pos = _lists[pos]\r\n\r\n        del _lists_pos[idx]\r\n        self._len -= 1\r\n\r\n        len_lists_pos = len(_lists_pos)\r\n\r\n        if len_lists_pos > (self._load >> 1):\r\n            _maxes[pos] = _lists_pos[-1]\r\n\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child > 0:\r\n                    _index[child] -= 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] -= 1\r\n        elif len(_lists) > 1:\r\n            if not pos:\r\n                pos += 1\r\n\r\n            prev = pos - 1\r\n            _lists[prev].extend(_lists[pos])\r\n            _maxes[prev] = _lists[prev][-1]\r\n\r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n\r\n            self._expand(prev)\r\n        elif len_lists_pos:\r\n            _maxes[pos] = _lists_pos[-1]\r\n        else:\r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n\r\n    def _loc(self, pos, idx):\r\n        \"\"\"Convert an index pair (lists index, sublist index) into a single\r\n        index number that corresponds to the position of the value in the\r\n        sorted list.\r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n        Indexing requires traversing the tree from a leaf node to the root. The\r\n        parent of each node is easily computable at ``(pos - 1) // 2``.\r\n        Left-child nodes are always at odd indices and right-child nodes are\r\n        always at even indices.\r\n        When traversing up from a right-child node, increment the total by the\r\n        left-child node.\r\n        The final index is the sum from traversal and the index in the sublist.\r\n        For example, using the index from ``SortedList._build_index``::\r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n        Tree::\r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n        Converting an index pair (2, 3) into a single index involves iterating\r\n        like so:\r\n        1. Starting at the leaf node: offset + alpha = 3 + 2 = 5. We identify\r\n           the node as a left-child node. At such nodes, we simply traverse to\r\n           the parent.\r\n        2. At node 9, position 2, we recognize the node as a right-child node\r\n           and accumulate the left-child in our total. Total is now 5 and we\r\n           traverse to the parent at position 0.\r\n        3. Iteration ends at the root.\r\n        The index is then the sum of the total and sublist index: 5 + 3 = 8.\r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n        :return: index in sorted list\r\n        \"\"\"\r\n        if not pos:\r\n            return idx\r\n\r\n        _index = self._index\r\n\r\n        if not _index:\r\n            self._build_index()\r\n\r\n        total = 0\r\n\r\n        # Increment pos to point in the index to len(self._lists[pos]).\r\n\r\n        pos += self._offset\r\n\r\n        # Iterate until reaching the root of the index tree at pos = 0.\r\n\r\n        while pos:\r\n\r\n            # Right-child nodes are at odd indices. At such indices\r\n            # account the total below the left child node.\r\n\r\n            if not pos & 1:\r\n                total += _index[pos - 1]\r\n\r\n            # Advance pos to the parent node.\r\n\r\n            pos = (pos - 1) >> 1\r\n\r\n        return total + idx\r\n\r\n    def _pos(self, idx):\r\n        \"\"\"Convert an index into an index pair (lists index, sublist index)\r\n        that can be used to access the corresponding lists position.\r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n        Indexing requires traversing the tree to a leaf node. Each node has two\r\n        children which are easily computable. Given an index, pos, the\r\n        left-child is at ``pos * 2 + 1`` and the right-child is at ``pos * 2 +\r\n        2``.\r\n        When the index is less than the left-child, traversal moves to the\r\n        left sub-tree. Otherwise, the index is decremented by the left-child\r\n        and traversal moves to the right sub-tree.\r\n        At a child node, the indexing pair is computed from the relative\r\n        position of the child node as compared with the offset and the remaining\r\n        index.\r\n        For example, using the index from ``SortedList._build_index``::\r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n        Tree::\r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n        Indexing position 8 involves iterating like so:\r\n        1. Starting at the root, position 0, 8 is compared with the left-child\r\n           node (5) which it is greater than. When greater the index is\r\n           decremented and the position is updated to the right child node.\r\n        2. At node 9 with index 3, we again compare the index to the left-child\r\n           node with value 4. Because the index is the less than the left-child\r\n           node, we simply traverse to the left.\r\n        3. At node 4 with index 3, we recognize that we are at a leaf node and\r\n           stop iterating.\r\n        4. To compute the sublist index, we subtract the offset from the index\r\n           of the leaf node: 5 - 3 = 2. To compute the index in the sublist, we\r\n           simply use the index remaining from iteration. In this case, 3.\r\n        The final index pair from our example is (2, 3) which corresponds to\r\n        index 8 in the sorted list.\r\n        :param int idx: index in sorted list\r\n        :return: (lists index, sublist index) pair\r\n        \"\"\"\r\n        if idx < 0:\r\n            last_len = len(self._lists[-1])\r\n\r\n            if (-idx) <= last_len:\r\n                return len(self._lists) - 1, last_len + idx\r\n\r\n            idx += self._len\r\n\r\n            if idx < 0:\r\n                raise IndexError('list index out of range')\r\n        elif idx >= self._len:\r\n            raise IndexError('list index out of range')\r\n\r\n        if idx < len(self._lists[0]):\r\n            return 0, idx\r\n\r\n        _index = self._index\r\n\r\n        if not _index:\r\n            self._build_index()\r\n\r\n        pos = 0\r\n        child = 1\r\n        len_index = len(_index)\r\n\r\n        while child < len_index:\r\n            index_child = _index[child]\r\n\r\n            if idx < index_child:\r\n                pos = child\r\n            else:\r\n                idx -= index_child\r\n                pos = child + 1\r\n\r\n            child = (pos << 1) + 1\r\n\r\n        return (pos - self._offset, idx)\r\n\r\n    def _build_index(self):\r\n        \"\"\"Build a positional index for indexing the sorted list.\r\n        Indexes are represented as binary trees in a dense array notation\r\n        similar to a binary heap.\r\n        For example, given a lists representation storing integers::\r\n            0: [1, 2, 3]\r\n            1: [4, 5]\r\n            2: [6, 7, 8, 9]\r\n            3: [10, 11, 12, 13, 14]\r\n        The first transformation maps the sub-lists by their length. The\r\n        first row of the index is the length of the sub-lists::\r\n            0: [3, 2, 4, 5]\r\n        Each row after that is the sum of consecutive pairs of the previous\r\n        row::\r\n            1: [5, 9]\r\n            2: [14]\r\n        Finally, the index is built by concatenating these lists together::\r\n            _index = [14, 5, 9, 3, 2, 4, 5]\r\n        An offset storing the start of the first row is also stored::\r\n            _offset = 3\r\n        When built, the index can be used for efficient indexing into the list.\r\n        See the comment and notes on ``SortedList._pos`` for details.\r\n        \"\"\"\r\n        row0 = list(map(len, self._lists))\r\n\r\n        if len(row0) == 1:\r\n            self._index[:] = row0\r\n            self._offset = 0\r\n            return\r\n\r\n        head = iter(row0)\r\n        tail = iter(head)\r\n        row1 = list(starmap(add, zip(head, tail)))\r\n\r\n        if len(row0) & 1:\r\n            row1.append(row0[-1])\r\n\r\n        if len(row1) == 1:\r\n            self._index[:] = row1 + row0\r\n            self._offset = 1\r\n            return\r\n\r\n        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)\r\n        row1.extend(repeat(0, size - len(row1)))\r\n        tree = [row0, row1]\r\n\r\n        while len(tree[-1]) > 1:\r\n            head = iter(tree[-1])\r\n            tail = iter(head)\r\n            row = list(starmap(add, zip(head, tail)))\r\n            tree.append(row)\r\n\r\n        reduce(iadd, reversed(tree), self._index)\r\n        self._offset = size * 2 - 1\r\n\r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\r\n        ``sl.__delitem__(index)`` <==> ``del sl[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList('abcde')\r\n        >>> del sl[2]\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd', 'e'])\r\n        >>> del sl[:2]\r\n        >>> sl\r\n        SortedList(['d', 'e'])\r\n        :param index: integer or slice for indexing\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n\r\n            if step == 1 and start < stop:\r\n                if start == 0 and stop == self._len:\r\n                    return self._clear()\r\n                elif self._len <= 8 * (stop - start):\r\n                    values = self._getitem(slice(None, start))\r\n                    if stop < self._len:\r\n                        values += self._getitem(slice(stop, None))\r\n                    self._clear()\r\n                    return self._update(values)\r\n\r\n            indices = range(start, stop, step)\r\n\r\n            # Delete items from greatest index to least so\r\n            # that the indices remain valid throughout iteration.\r\n\r\n            if step > 0:\r\n                indices = reversed(indices)\r\n\r\n            _pos, _delete = self._pos, self._delete\r\n\r\n            for index in indices:\r\n                pos, idx = _pos(index)\r\n                _delete(pos, idx)\r\n        else:\r\n            pos, idx = self._pos(index)\r\n            self._delete(pos, idx)\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\r\n        ``sl.__getitem__(index)`` <==> ``sl[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList('abcde')\r\n        >>> sl[1]\r\n        'b'\r\n        >>> sl[-1]\r\n        'e'\r\n        >>> sl[2:5]\r\n        ['c', 'd', 'e']\r\n        :param index: integer or slice for indexing\r\n        :return: value or list of values\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        _lists = self._lists\r\n\r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n\r\n            if step == 1 and start < stop:\r\n                # Whole slice optimization: start to stop slices the whole\r\n                # sorted list.\r\n\r\n                if start == 0 and stop == self._len:\r\n                    return reduce(iadd, self._lists, [])\r\n\r\n                start_pos, start_idx = self._pos(start)\r\n                start_list = _lists[start_pos]\r\n                stop_idx = start_idx + stop - start\r\n\r\n                # Small slice optimization: start index and stop index are\r\n                # within the start list.\r\n\r\n                if len(start_list) >= stop_idx:\r\n                    return start_list[start_idx:stop_idx]\r\n\r\n                if stop == self._len:\r\n                    stop_pos = len(_lists) - 1\r\n                    stop_idx = len(_lists[stop_pos])\r\n                else:\r\n                    stop_pos, stop_idx = self._pos(stop)\r\n\r\n                prefix = _lists[start_pos][start_idx:]\r\n                middle = _lists[(start_pos + 1):stop_pos]\r\n                result = reduce(iadd, middle, prefix)\r\n                result += _lists[stop_pos][:stop_idx]\r\n\r\n                return result\r\n\r\n            if step == -1 and start > stop:\r\n                result = self._getitem(slice(stop + 1, start + 1))\r\n                result.reverse()\r\n                return result\r\n\r\n            # Return a list because a negative step could\r\n            # reverse the order of the items and this could\r\n            # be the desired behavior.\r\n\r\n            indices = range(start, stop, step)\r\n            return list(self._getitem(index) for index in indices)\r\n        else:\r\n            if self._len:\r\n                if index == 0:\r\n                    return _lists[0][0]\r\n                elif index == -1:\r\n                    return _lists[-1][-1]\r\n            else:\r\n                raise IndexError('list index out of range')\r\n\r\n            if 0 <= index < len(_lists[0]):\r\n                return _lists[0][index]\r\n\r\n            len_last = len(_lists[-1])\r\n\r\n            if -len_last < index < 0:\r\n                return _lists[-1][len_last + index]\r\n\r\n            pos, idx = self._pos(index)\r\n            return _lists[pos][idx]\r\n\r\n    _getitem = __getitem__\r\n\r\n    def __setitem__(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n        ``sl.__setitem__(index, value)`` <==> ``sl[index] = value``\r\n        :raises NotImplementedError: use ``del sl[index]`` and\r\n            ``sl.add(value)`` instead\r\n        \"\"\"\r\n        message = 'use ``del sl[index]`` and ``sl.add(value)`` instead'\r\n        raise NotImplementedError(message)\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\r\n        ``sl.__iter__()`` <==> ``iter(sl)``\r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n        \"\"\"\r\n        return chain.from_iterable(self._lists)\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\r\n        ``sl.__reversed__()`` <==> ``reversed(sl)``\r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n        \"\"\"\r\n        return chain.from_iterable(map(reversed, reversed(self._lists)))\r\n\r\n    def reverse(self):\r\n        \"\"\"Raise not-implemented error.\r\n        Sorted list maintains values in ascending sort order. Values may not be\r\n        reversed in-place.\r\n        Use ``reversed(sl)`` for an iterator over values in descending sort\r\n        order.\r\n        Implemented to override `MutableSequence.reverse` which provides an\r\n        erroneous default implementation.\r\n        :raises NotImplementedError: use ``reversed(sl)`` instead\r\n        \"\"\"\r\n        raise NotImplementedError('use ``reversed(sl)`` instead')\r\n\r\n    def islice(self, start=None, stop=None, reverse=False):\r\n        \"\"\"Return an iterator that slices sorted list from `start` to `stop`.\r\n        The `start` and `stop` index are treated inclusive and exclusive,\r\n        respectively.\r\n        Both `start` and `stop` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.islice(2, 6)\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n        :param int start: start index (inclusive)\r\n        :param int stop: stop index (exclusive)\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n        \"\"\"\r\n        _len = self._len\r\n\r\n        if not _len:\r\n            return iter(())\r\n\r\n        start, stop, _ = slice(start, stop).indices(self._len)\r\n\r\n        if start >= stop:\r\n            return iter(())\r\n\r\n        _pos = self._pos\r\n\r\n        min_pos, min_idx = _pos(start)\r\n\r\n        if stop == _len:\r\n            max_pos = len(self._lists) - 1\r\n            max_idx = len(self._lists[-1])\r\n        else:\r\n            max_pos, max_idx = _pos(stop)\r\n\r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n\r\n    def _islice(self, min_pos, min_idx, max_pos, max_idx, reverse):\r\n        \"\"\"Return an iterator that slices sorted list using two index pairs.\r\n        The index pairs are (min_pos, min_idx) and (max_pos, max_idx), the\r\n        first inclusive and the latter exclusive. See `_pos` for details on how\r\n        an index is converted to an index pair.\r\n        When `reverse` is `True`, values are yielded from the iterator in\r\n        reverse order.\r\n        \"\"\"\r\n        _lists = self._lists\r\n\r\n        if min_pos > max_pos:\r\n            return iter(())\r\n\r\n        if min_pos == max_pos:\r\n            if reverse:\r\n                indices = reversed(range(min_idx, max_idx))\r\n                return map(_lists[min_pos].__getitem__, indices)\r\n\r\n            indices = range(min_idx, max_idx)\r\n            return map(_lists[min_pos].__getitem__, indices)\r\n\r\n        next_pos = min_pos + 1\r\n\r\n        if next_pos == max_pos:\r\n            if reverse:\r\n                min_indices = range(min_idx, len(_lists[min_pos]))\r\n                max_indices = range(max_idx)\r\n                return chain(\r\n                    map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                    map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n                )\r\n\r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[min_pos].__getitem__, min_indices),\r\n                map(_lists[max_pos].__getitem__, max_indices),\r\n            )\r\n\r\n        if reverse:\r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            sublist_indices = range(next_pos, max_pos)\r\n            sublists = map(_lists.__getitem__, reversed(sublist_indices))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                chain.from_iterable(map(reversed, sublists)),\r\n                map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n            )\r\n\r\n        min_indices = range(min_idx, len(_lists[min_pos]))\r\n        sublist_indices = range(next_pos, max_pos)\r\n        sublists = map(_lists.__getitem__, sublist_indices)\r\n        max_indices = range(max_idx)\r\n        return chain(\r\n            map(_lists[min_pos].__getitem__, min_indices),\r\n            chain.from_iterable(sublists),\r\n            map(_lists[max_pos].__getitem__, max_indices),\r\n        )\r\n\r\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True),\r\n               reverse=False):\r\n        \"\"\"Create an iterator of values between `minimum` and `maximum`.\r\n        Both `minimum` and `maximum` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n        The argument `inclusive` is a pair of booleans that indicates whether\r\n        the minimum and maximum ought to be included in the range,\r\n        respectively. The default is ``(True, True)`` such that the range is\r\n        inclusive of both minimum and maximum.\r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.irange('c', 'f')\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n        :param minimum: minimum value to start iterating\r\n        :param maximum: maximum value to stop iterating\r\n        :param inclusive: pair of booleans\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return iter(())\r\n\r\n        _lists = self._lists\r\n\r\n        # Calculate the minimum (pos, idx) pair. By default this location\r\n        # will be inclusive in our calculation.\r\n\r\n        if minimum is None:\r\n            min_pos = 0\r\n            min_idx = 0\r\n        else:\r\n            if inclusive[0]:\r\n                min_pos = bisect_left(_maxes, minimum)\r\n\r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n\r\n                min_idx = bisect_left(_lists[min_pos], minimum)\r\n            else:\r\n                min_pos = bisect_right(_maxes, minimum)\r\n\r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n\r\n                min_idx = bisect_right(_lists[min_pos], minimum)\r\n\r\n        # Calculate the maximum (pos, idx) pair. By default this location\r\n        # will be exclusive in our calculation.\r\n\r\n        if maximum is None:\r\n            max_pos = len(_maxes) - 1\r\n            max_idx = len(_lists[max_pos])\r\n        else:\r\n            if inclusive[1]:\r\n                max_pos = bisect_right(_maxes, maximum)\r\n\r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_right(_lists[max_pos], maximum)\r\n            else:\r\n                max_pos = bisect_left(_maxes, maximum)\r\n\r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_left(_lists[max_pos], maximum)\r\n\r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n\r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\r\n        ``sl.__len__()`` <==> ``len(sl)``\r\n        :return: size of sorted list\r\n        \"\"\"\r\n        return self._len\r\n\r\n    def bisect_left(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n        If the `value` is already present, the insertion point will be before\r\n        (to the left of) any existing values.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_left(12)\r\n        2\r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        pos = bisect_left(_maxes, value)\r\n\r\n        if pos == len(_maxes):\r\n            return self._len\r\n\r\n        idx = bisect_left(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n\r\n    def bisect_right(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n        Similar to `bisect_left`, but if `value` is already present, the\r\n        insertion point will be after (to the right of) any existing values.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_right(12)\r\n        3\r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        pos = bisect_right(_maxes, value)\r\n\r\n        if pos == len(_maxes):\r\n            return self._len\r\n\r\n        idx = bisect_right(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n\r\n    bisect = bisect_right\r\n    _bisect_right = bisect_right\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\r\n        >>> sl.count(3)\r\n        3\r\n        :param value: value to count in sorted list\r\n        :return: count\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        pos_left = bisect_left(_maxes, value)\r\n\r\n        if pos_left == len(_maxes):\r\n            return 0\r\n\r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n        pos_right = bisect_right(_maxes, value)\r\n\r\n        if pos_right == len(_maxes):\r\n            return self._len - self._loc(pos_left, idx_left)\r\n\r\n        idx_right = bisect_right(_lists[pos_right], value)\r\n\r\n        if pos_left == pos_right:\r\n            return idx_right - idx_left\r\n\r\n        right = self._loc(pos_right, idx_right)\r\n        left = self._loc(pos_left, idx_left)\r\n        return right - left\r\n\r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted list.\r\n        Runtime complexity: `O(n)`\r\n        :return: new sorted list\r\n        \"\"\"\r\n        return self.__class__(self)\r\n\r\n    __copy__ = copy\r\n\r\n    def append(self, value):\r\n        \"\"\"Raise not-implemented error.\r\n        Implemented to override `MutableSequence.append` which provides an\r\n        erroneous default implementation.\r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n        \"\"\"\r\n        raise NotImplementedError('use ``sl.add(value)`` instead')\r\n\r\n    def extend(self, values):\r\n        \"\"\"Raise not-implemented error.\r\n        Implemented to override `MutableSequence.extend` which provides an\r\n        erroneous default implementation.\r\n        :raises NotImplementedError: use ``sl.update(values)`` instead\r\n        \"\"\"\r\n        raise NotImplementedError('use ``sl.update(values)`` instead')\r\n\r\n    def insert(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n        \"\"\"\r\n        raise NotImplementedError('use ``sl.add(value)`` instead')\r\n\r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\r\n        Raise :exc:`IndexError` if the sorted list is empty or index is out of\r\n        range.\r\n        Negative indices are supported.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.pop()\r\n        'e'\r\n        >>> sl.pop(2)\r\n        'c'\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd'])\r\n        :param int index: index of value (default -1)\r\n        :return: value\r\n        :raises IndexError: if index is out of range\r\n        \"\"\"\r\n        if not self._len:\r\n            raise IndexError('pop index out of range')\r\n\r\n        _lists = self._lists\r\n\r\n        if index == 0:\r\n            val = _lists[0][0]\r\n            self._delete(0, 0)\r\n            return val\r\n\r\n        if index == -1:\r\n            pos = len(_lists) - 1\r\n            loc = len(_lists[pos]) - 1\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n\r\n        if 0 <= index < len(_lists[0]):\r\n            val = _lists[0][index]\r\n            self._delete(0, index)\r\n            return val\r\n\r\n        len_last = len(_lists[-1])\r\n\r\n        if -len_last < index < 0:\r\n            pos = len(_lists) - 1\r\n            loc = len_last + index\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n\r\n        pos, idx = self._pos(index)\r\n        val = _lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return val\r\n\r\n    def index(self, value, start=None, stop=None):\r\n        \"\"\"Return first index of value in sorted list.\r\n        Raise ValueError if `value` is not present.\r\n        Index must be between `start` and `stop` for the `value` to be\r\n        considered present. The default value, None, for `start` and `stop`\r\n        indicate the beginning and end of the sorted list.\r\n        Negative indices are supported.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.index('d')\r\n        3\r\n        >>> sl.index('z')\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 'z' is not in list\r\n        :param value: value in sorted list\r\n        :param int start: start index (default None, start of sorted list)\r\n        :param int stop: stop index (default None, end of sorted list)\r\n        :return: index of value\r\n        :raises ValueError: if value is not present\r\n        \"\"\"\r\n        _len = self._len\r\n\r\n        if not _len:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        if start is None:\r\n            start = 0\r\n        if start < 0:\r\n            start += _len\r\n        if start < 0:\r\n            start = 0\r\n\r\n        if stop is None:\r\n            stop = _len\r\n        if stop < 0:\r\n            stop += _len\r\n        if stop > _len:\r\n            stop = _len\r\n\r\n        if stop <= start:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        _maxes = self._maxes\r\n        pos_left = bisect_left(_maxes, value)\r\n\r\n        if pos_left == len(_maxes):\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n\r\n        if _lists[pos_left][idx_left] != value:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        stop -= 1\r\n        left = self._loc(pos_left, idx_left)\r\n\r\n        if start <= left:\r\n            if left <= stop:\r\n                return left\r\n        else:\r\n            right = self._bisect_right(value) - 1\r\n\r\n            if start <= right:\r\n                return start\r\n\r\n        raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n    def __add__(self, other):\r\n        \"\"\"Return new sorted list containing all values in both sequences.\r\n        ``sl.__add__(other)`` <==> ``sl + other``\r\n        Values in `other` do not need to be in sorted order.\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> sl1 = SortedList('bat')\r\n        >>> sl2 = SortedList('cat')\r\n        >>> sl1 + sl2\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n        :param other: other iterable\r\n        :return: new sorted list\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        values.extend(other)\r\n        return self.__class__(values)\r\n\r\n    __radd__ = __add__\r\n\r\n    def __iadd__(self, other):\r\n        \"\"\"Update sorted list with values from `other`.\r\n        ``sl.__iadd__(other)`` <==> ``sl += other``\r\n        Values in `other` do not need to be in sorted order.\r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n        >>> sl = SortedList('bat')\r\n        >>> sl += 'cat'\r\n        >>> sl\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n        :param other: other iterable\r\n        :return: existing sorted list\r\n        \"\"\"\r\n        self._update(other)\r\n        return self\r\n\r\n    def __mul__(self, num):\r\n        \"\"\"Return new sorted list with `num` shallow copies of values.\r\n        ``sl.__mul__(num)`` <==> ``sl * num``\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> sl = SortedList('abc')\r\n        >>> sl * 3\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n        :param int num: count of shallow copies\r\n        :return: new sorted list\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        return self.__class__(values)\r\n\r\n    __rmul__ = __mul__\r\n\r\n    def __imul__(self, num):\r\n        \"\"\"Update the sorted list with `num` shallow copies of values.\r\n        ``sl.__imul__(num)`` <==> ``sl *= num``\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> sl = SortedList('abc')\r\n        >>> sl *= 3\r\n        >>> sl\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n        :param int num: count of shallow copies\r\n        :return: existing sorted list\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        self._clear()\r\n        self._update(values)\r\n        return self\r\n\r\n    def __make_cmp(seq_op, symbol, doc):\r\n        \"Make comparator method.\"\r\n\r\n        def comparer(self, other):\r\n            \"Compare method for sorted list and sequence.\"\r\n            if not isinstance(other, Sequence):\r\n                return NotImplemented\r\n\r\n            self_len = self._len\r\n            len_other = len(other)\r\n\r\n            if self_len != len_other:\r\n                if seq_op is eq:\r\n                    return False\r\n                if seq_op is ne:\r\n                    return True\r\n\r\n            for alpha, beta in zip(self, other):\r\n                if alpha != beta:\r\n                    return seq_op(alpha, beta)\r\n\r\n            return seq_op(self_len, len_other)\r\n\r\n        seq_op_name = seq_op.__name__\r\n        comparer.__name__ = '__{0}__'.format(seq_op_name)\r\n        doc_str = \"\"\"Return true if and only if sorted list is {0} `other`.\r\n        ``sl.__{1}__(other)`` <==> ``sl {2} other``\r\n        Comparisons use lexicographical order as with sequences.\r\n        Runtime complexity: `O(n)`\r\n        :param other: `other` sequence\r\n        :return: true if sorted list is {0} `other`\r\n        \"\"\"\r\n        comparer.__doc__ = dedent(doc_str.format(doc, seq_op_name, symbol))\r\n        return comparer\r\n\r\n    __eq__ = __make_cmp(eq, '==', 'equal to')\r\n    __ne__ = __make_cmp(ne, '!=', 'not equal to')\r\n    __lt__ = __make_cmp(lt, '<', 'less than')\r\n    __gt__ = __make_cmp(gt, '>', 'greater than')\r\n    __le__ = __make_cmp(le, '<=', 'less than or equal to')\r\n    __ge__ = __make_cmp(ge, '>=', 'greater than or equal to')\r\n    __make_cmp = staticmethod(__make_cmp)\r\n\r\n    def __reduce__(self):\r\n        values = reduce(iadd, self._lists, [])\r\n        return (type(self), (values,))\r\n\r\n    @recursive_repr()\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\r\n        ``sl.__repr__()`` <==> ``repr(sl)``\r\n        :return: string representation\r\n        \"\"\"\r\n        return '{0}({1!r})'.format(type(self).__name__, list(self))\r\n\r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted list.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        try:\r\n            assert self._load >= 4\r\n            assert len(self._maxes) == len(self._lists)\r\n            assert self._len == sum(len(sublist) for sublist in self._lists)\r\n\r\n            # Check all sublists are sorted.\r\n\r\n            for sublist in self._lists:\r\n                for pos in range(1, len(sublist)):\r\n                    assert sublist[pos - 1] <= sublist[pos]\r\n\r\n            # Check beginning/end of sublists are sorted.\r\n\r\n            for pos in range(1, len(self._lists)):\r\n                assert self._lists[pos - 1][-1] <= self._lists[pos][0]\r\n\r\n            # Check _maxes index is the last value of each sublist.\r\n\r\n            for pos in range(len(self._maxes)):\r\n                assert self._maxes[pos] == self._lists[pos][-1]\r\n\r\n            # Check sublist lengths are less than double load-factor.\r\n\r\n            double = self._load << 1\r\n            assert all(len(sublist) <= double for sublist in self._lists)\r\n\r\n            # Check sublist lengths are greater than half load-factor for all\r\n            # but the last sublist.\r\n\r\n            half = self._load >> 1\r\n            for pos in range(0, len(self._lists) - 1):\r\n                assert len(self._lists[pos]) >= half\r\n\r\n            if self._index:\r\n                assert self._len == self._index[0]\r\n                assert len(self._index) == self._offset + len(self._lists)\r\n\r\n                # Check index leaf nodes equal length of sublists.\r\n\r\n                for pos in range(len(self._lists)):\r\n                    leaf = self._index[self._offset + pos]\r\n                    assert leaf == len(self._lists[pos])\r\n\r\n                # Check index branch nodes are the sum of their children.\r\n\r\n                for pos in range(self._offset):\r\n                    child = (pos << 1) + 1\r\n                    if child >= len(self._index):\r\n                        assert self._index[pos] == 0\r\n                    elif child + 1 == len(self._index):\r\n                        assert self._index[pos] == self._index[child]\r\n                    else:\r\n                        child_sum = self._index[child] + self._index[child + 1]\r\n                        assert child_sum == self._index[pos]\r\n        except BaseException:\r\n            traceback.print_exc(file=sys.stdout)\r\n            print('len', self._len)\r\n            print('load', self._load)\r\n            print('offset', self._offset)\r\n            print('len_index', len(self._index))\r\n            print('index', self._index)\r\n            print('len_maxes', len(self._maxes))\r\n            print('maxes', self._maxes)\r\n            print('len_lists', len(self._lists))\r\n            print('lists', self._lists)\r\n            raise\r\n\r\n\r\ndef identity(value):\r\n    \"Identity function.\"\r\n    return value\r\n\r\n\r\nclass SortedKeyList(SortedList):\r\n    \"\"\"Sorted-key list is a subtype of sorted list.\r\n    The sorted-key list maintains values in comparison order based on the\r\n    result of a key function applied to every value.\r\n    All the same methods that are available in :class:`SortedList` are also\r\n    available in :class:`SortedKeyList`.\r\n    Additional methods provided:\r\n    * :attr:`SortedKeyList.key`\r\n    * :func:`SortedKeyList.bisect_key_left`\r\n    * :func:`SortedKeyList.bisect_key_right`\r\n    * :func:`SortedKeyList.irange_key`\r\n    Some examples below use:\r\n    >>> from operator import neg\r\n    >>> neg\r\n    <built-in function neg>\r\n    >>> neg(1)\r\n    -1\r\n    \"\"\"\r\n\r\n    def __init__(self, iterable=None, key=identity):\r\n        \"\"\"Initialize sorted-key list instance.\r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted-key list.\r\n        Optional `key` argument defines a callable that, like the `key`\r\n        argument to Python's `sorted` function, extracts a comparison key from\r\n        each value. The default is the identity function.\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList(key=neg)\r\n        >>> skl\r\n        SortedKeyList([], key=<built-in function neg>)\r\n        >>> skl = SortedKeyList([3, 1, 2], key=neg)\r\n        >>> skl\r\n        SortedKeyList([3, 2, 1], key=<built-in function neg>)\r\n        :param iterable: initial values (optional)\r\n        :param key: function used to extract comparison key (optional)\r\n        \"\"\"\r\n        self._key = key\r\n        self._len = 0\r\n        self._load = self.DEFAULT_LOAD_FACTOR\r\n        self._lists = []\r\n        self._keys = []\r\n        self._maxes = []\r\n        self._index = []\r\n        self._offset = 0\r\n\r\n        if iterable is not None:\r\n            self._update(iterable)\r\n\r\n    def __new__(cls, iterable=None, key=identity):\r\n        return object.__new__(cls)\r\n\r\n    @property\r\n    def key(self):\r\n        \"Function used to extract comparison key from values.\"\r\n        return self._key\r\n\r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted-key list.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        self._len = 0\r\n        del self._lists[:]\r\n        del self._keys[:]\r\n        del self._maxes[:]\r\n        del self._index[:]\r\n\r\n    _clear = clear\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted-key list.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList(key=neg)\r\n        >>> skl.add(3)\r\n        >>> skl.add(1)\r\n        >>> skl.add(2)\r\n        >>> skl\r\n        SortedKeyList([3, 2, 1], key=<built-in function neg>)\r\n        :param value: value to add to sorted-key list\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        _maxes = self._maxes\r\n\r\n        key = self._key(value)\r\n\r\n        if _maxes:\r\n            pos = bisect_right(_maxes, key)\r\n\r\n            if pos == len(_maxes):\r\n                pos -= 1\r\n                _lists[pos].append(value)\r\n                _keys[pos].append(key)\r\n                _maxes[pos] = key\r\n            else:\r\n                idx = bisect_right(_keys[pos], key)\r\n                _lists[pos].insert(idx, value)\r\n                _keys[pos].insert(idx, key)\r\n\r\n            self._expand(pos)\r\n        else:\r\n            _lists.append([value])\r\n            _keys.append([key])\r\n            _maxes.append(key)\r\n\r\n        self._len += 1\r\n\r\n    def _expand(self, pos):\r\n        \"\"\"Split sublists with length greater than double the load-factor.\r\n        Updates the index when the sublist length is less than double the load\r\n        level. This requires incrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        _index = self._index\r\n\r\n        if len(_keys[pos]) > (self._load << 1):\r\n            _maxes = self._maxes\r\n            _load = self._load\r\n\r\n            _lists_pos = _lists[pos]\r\n            _keys_pos = _keys[pos]\r\n            half = _lists_pos[_load:]\r\n            half_keys = _keys_pos[_load:]\r\n            del _lists_pos[_load:]\r\n            del _keys_pos[_load:]\r\n            _maxes[pos] = _keys_pos[-1]\r\n\r\n            _lists.insert(pos + 1, half)\r\n            _keys.insert(pos + 1, half_keys)\r\n            _maxes.insert(pos + 1, half_keys[-1])\r\n\r\n            del _index[:]\r\n        else:\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child:\r\n                    _index[child] += 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] += 1\r\n\r\n    def update(self, iterable):\r\n        \"\"\"Update sorted-key list by adding all values from `iterable`.\r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList(key=neg)\r\n        >>> skl.update([3, 1, 2])\r\n        >>> skl\r\n        SortedKeyList([3, 2, 1], key=<built-in function neg>)\r\n        :param iterable: iterable of values to add\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        _maxes = self._maxes\r\n        values = sorted(iterable, key=self._key)\r\n\r\n        if _maxes:\r\n            if len(values) * 4 >= self._len:\r\n                values.extend(chain.from_iterable(_lists))\r\n                values.sort(key=self._key)\r\n                self._clear()\r\n            else:\r\n                _add = self.add\r\n                for val in values:\r\n                    _add(val)\r\n                return\r\n\r\n        _load = self._load\r\n        _lists.extend(values[pos:(pos + _load)]\r\n                      for pos in range(0, len(values), _load))\r\n        _keys.extend(list(map(self._key, _list)) for _list in _lists)\r\n        _maxes.extend(sublist[-1] for sublist in _keys)\r\n        self._len = len(values)\r\n        del self._index[:]\r\n\r\n    _update = update\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted-key list.\r\n        ``skl.__contains__(value)`` <==> ``value in skl``\r\n        Runtime complexity: `O(log(n))`\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([1, 2, 3, 4, 5], key=neg)\r\n        >>> 3 in skl\r\n        True\r\n        :param value: search for value in sorted-key list\r\n        :return: true if `value` in sorted-key list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return False\r\n\r\n        key = self._key(value)\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            return False\r\n\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n\r\n        idx = bisect_left(_keys[pos], key)\r\n\r\n        len_keys = len(_keys)\r\n        len_sublist = len(_keys[pos])\r\n\r\n        while True:\r\n            if _keys[pos][idx] != key:\r\n                return False\r\n            if _lists[pos][idx] == value:\r\n                return True\r\n            idx += 1\r\n            if idx == len_sublist:\r\n                pos += 1\r\n                if pos == len_keys:\r\n                    return False\r\n                len_sublist = len(_keys[pos])\r\n                idx = 0\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted-key list if it is a member.\r\n        If `value` is not a member, do nothing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.discard(1)\r\n        >>> skl.discard(0)\r\n        >>> skl == [5, 4, 3, 2]\r\n        True\r\n        :param value: `value` to discard from sorted-key list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return\r\n\r\n        key = self._key(value)\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            return\r\n\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        idx = bisect_left(_keys[pos], key)\r\n        len_keys = len(_keys)\r\n        len_sublist = len(_keys[pos])\r\n\r\n        while True:\r\n            if _keys[pos][idx] != key:\r\n                return\r\n            if _lists[pos][idx] == value:\r\n                self._delete(pos, idx)\r\n                return\r\n            idx += 1\r\n            if idx == len_sublist:\r\n                pos += 1\r\n                if pos == len_keys:\r\n                    return\r\n                len_sublist = len(_keys[pos])\r\n                idx = 0\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted-key list; `value` must be a member.\r\n        If `value` is not a member, raise ValueError.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([1, 2, 3, 4, 5], key=neg)\r\n        >>> skl.remove(5)\r\n        >>> skl == [4, 3, 2, 1]\r\n        True\r\n        >>> skl.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 not in list\r\n        :param value: `value` to remove from sorted-key list\r\n        :raises ValueError: if `value` is not in sorted-key list\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n        key = self._key(value)\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        idx = bisect_left(_keys[pos], key)\r\n        len_keys = len(_keys)\r\n        len_sublist = len(_keys[pos])\r\n\r\n        while True:\r\n            if _keys[pos][idx] != key:\r\n                raise ValueError('{0!r} not in list'.format(value))\r\n            if _lists[pos][idx] == value:\r\n                self._delete(pos, idx)\r\n                return\r\n            idx += 1\r\n            if idx == len_sublist:\r\n                pos += 1\r\n                if pos == len_keys:\r\n                    raise ValueError('{0!r} not in list'.format(value))\r\n                len_sublist = len(_keys[pos])\r\n                idx = 0\r\n\r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\r\n        Combines lists that are less than half the load level.\r\n        Updates the index when the sublist length is more than half the load\r\n        level. This requires decrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n        \"\"\"\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        _maxes = self._maxes\r\n        _index = self._index\r\n        keys_pos = _keys[pos]\r\n        lists_pos = _lists[pos]\r\n\r\n        del keys_pos[idx]\r\n        del lists_pos[idx]\r\n        self._len -= 1\r\n\r\n        len_keys_pos = len(keys_pos)\r\n\r\n        if len_keys_pos > (self._load >> 1):\r\n            _maxes[pos] = keys_pos[-1]\r\n\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child > 0:\r\n                    _index[child] -= 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] -= 1\r\n        elif len(_keys) > 1:\r\n            if not pos:\r\n                pos += 1\r\n\r\n            prev = pos - 1\r\n            _keys[prev].extend(_keys[pos])\r\n            _lists[prev].extend(_lists[pos])\r\n            _maxes[prev] = _keys[prev][-1]\r\n\r\n            del _lists[pos]\r\n            del _keys[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n\r\n            self._expand(prev)\r\n        elif len_keys_pos:\r\n            _maxes[pos] = keys_pos[-1]\r\n        else:\r\n            del _lists[pos]\r\n            del _keys[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n\r\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True),\r\n               reverse=False):\r\n        \"\"\"Create an iterator of values between `minimum` and `maximum`.\r\n        Both `minimum` and `maximum` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted-key list.\r\n        The argument `inclusive` is a pair of booleans that indicates whether\r\n        the minimum and maximum ought to be included in the range,\r\n        respectively. The default is ``(True, True)`` such that the range is\r\n        inclusive of both minimum and maximum.\r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([11, 12, 13, 14, 15], key=neg)\r\n        >>> it = skl.irange(14.5, 11.5)\r\n        >>> list(it)\r\n        [14, 13, 12]\r\n        :param minimum: minimum value to start iterating\r\n        :param maximum: maximum value to stop iterating\r\n        :param inclusive: pair of booleans\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n        \"\"\"\r\n        min_key = self._key(minimum) if minimum is not None else None\r\n        max_key = self._key(maximum) if maximum is not None else None\r\n        return self._irange_key(\r\n            min_key=min_key, max_key=max_key,\r\n            inclusive=inclusive, reverse=reverse,\r\n        )\r\n\r\n    def irange_key(self, min_key=None, max_key=None, inclusive=(True, True),\r\n                   reverse=False):\r\n        \"\"\"Create an iterator of values between `min_key` and `max_key`.\r\n        Both `min_key` and `max_key` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted-key list.\r\n        The argument `inclusive` is a pair of booleans that indicates whether\r\n        the minimum and maximum ought to be included in the range,\r\n        respectively. The default is ``(True, True)`` such that the range is\r\n        inclusive of both minimum and maximum.\r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([11, 12, 13, 14, 15], key=neg)\r\n        >>> it = skl.irange_key(-14, -12)\r\n        >>> list(it)\r\n        [14, 13, 12]\r\n        :param min_key: minimum key to start iterating\r\n        :param max_key: maximum key to stop iterating\r\n        :param inclusive: pair of booleans\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return iter(())\r\n\r\n        _keys = self._keys\r\n\r\n        # Calculate the minimum (pos, idx) pair. By default this location\r\n        # will be inclusive in our calculation.\r\n\r\n        if min_key is None:\r\n            min_pos = 0\r\n            min_idx = 0\r\n        else:\r\n            if inclusive[0]:\r\n                min_pos = bisect_left(_maxes, min_key)\r\n\r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n\r\n                min_idx = bisect_left(_keys[min_pos], min_key)\r\n            else:\r\n                min_pos = bisect_right(_maxes, min_key)\r\n\r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n\r\n                min_idx = bisect_right(_keys[min_pos], min_key)\r\n\r\n        # Calculate the maximum (pos, idx) pair. By default this location\r\n        # will be exclusive in our calculation.\r\n\r\n        if max_key is None:\r\n            max_pos = len(_maxes) - 1\r\n            max_idx = len(_keys[max_pos])\r\n        else:\r\n            if inclusive[1]:\r\n                max_pos = bisect_right(_maxes, max_key)\r\n\r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_keys[max_pos])\r\n                else:\r\n                    max_idx = bisect_right(_keys[max_pos], max_key)\r\n            else:\r\n                max_pos = bisect_left(_maxes, max_key)\r\n\r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_keys[max_pos])\r\n                else:\r\n                    max_idx = bisect_left(_keys[max_pos], max_key)\r\n\r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n\r\n    _irange_key = irange_key\r\n\r\n    def bisect_left(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted-key list.\r\n        If the `value` is already present, the insertion point will be before\r\n        (to the left of) any existing values.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.bisect_left(1)\r\n        4\r\n        :param value: insertion index of value in sorted-key list\r\n        :return: index\r\n        \"\"\"\r\n        return self._bisect_key_left(self._key(value))\r\n\r\n    def bisect_right(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted-key list.\r\n        Similar to `bisect_left`, but if `value` is already present, the\r\n        insertion point will be after (to the right of) any existing values.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.bisect_right(1)\r\n        5\r\n        :param value: insertion index of value in sorted-key list\r\n        :return: index\r\n        \"\"\"\r\n        return self._bisect_key_right(self._key(value))\r\n\r\n    bisect = bisect_right\r\n\r\n    def bisect_key_left(self, key):\r\n        \"\"\"Return an index to insert `key` in the sorted-key list.\r\n        If the `key` is already present, the insertion point will be before (to\r\n        the left of) any existing keys.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.bisect_key_left(-1)\r\n        4\r\n        :param key: insertion index of key in sorted-key list\r\n        :return: index\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            return self._len\r\n\r\n        idx = bisect_left(self._keys[pos], key)\r\n\r\n        return self._loc(pos, idx)\r\n\r\n    _bisect_key_left = bisect_key_left\r\n\r\n    def bisect_key_right(self, key):\r\n        \"\"\"Return an index to insert `key` in the sorted-key list.\r\n        Similar to `bisect_key_left`, but if `key` is already present, the\r\n        insertion point will be after (to the right of) any existing keys.\r\n        Similar to the `bisect` module in the standard library.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.bisect_key_right(-1)\r\n        5\r\n        :param key: insertion index of key in sorted-key list\r\n        :return: index\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        pos = bisect_right(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            return self._len\r\n\r\n        idx = bisect_right(self._keys[pos], key)\r\n\r\n        return self._loc(pos, idx)\r\n\r\n    bisect_key = bisect_key_right\r\n    _bisect_key_right = bisect_key_right\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted-key list.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([4, 4, 4, 4, 3, 3, 3, 2, 2, 1], key=neg)\r\n        >>> skl.count(2)\r\n        2\r\n        :param value: value to count in sorted-key list\r\n        :return: count\r\n        \"\"\"\r\n        _maxes = self._maxes\r\n\r\n        if not _maxes:\r\n            return 0\r\n\r\n        key = self._key(value)\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            return 0\r\n\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        idx = bisect_left(_keys[pos], key)\r\n        total = 0\r\n        len_keys = len(_keys)\r\n        len_sublist = len(_keys[pos])\r\n\r\n        while True:\r\n            if _keys[pos][idx] != key:\r\n                return total\r\n            if _lists[pos][idx] == value:\r\n                total += 1\r\n            idx += 1\r\n            if idx == len_sublist:\r\n                pos += 1\r\n                if pos == len_keys:\r\n                    return total\r\n                len_sublist = len(_keys[pos])\r\n                idx = 0\r\n\r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted-key list.\r\n        Runtime complexity: `O(n)`\r\n        :return: new sorted-key list\r\n        \"\"\"\r\n        return self.__class__(self, key=self._key)\r\n\r\n    __copy__ = copy\r\n\r\n    def index(self, value, start=None, stop=None):\r\n        \"\"\"Return first index of value in sorted-key list.\r\n        Raise ValueError if `value` is not present.\r\n        Index must be between `start` and `stop` for the `value` to be\r\n        considered present. The default value, None, for `start` and `stop`\r\n        indicate the beginning and end of the sorted-key list.\r\n        Negative indices are supported.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([5, 4, 3, 2, 1], key=neg)\r\n        >>> skl.index(2)\r\n        3\r\n        >>> skl.index(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 is not in list\r\n        :param value: value in sorted-key list\r\n        :param int start: start index (default None, start of sorted-key list)\r\n        :param int stop: stop index (default None, end of sorted-key list)\r\n        :return: index of value\r\n        :raises ValueError: if value is not present\r\n        \"\"\"\r\n        _len = self._len\r\n\r\n        if not _len:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        if start is None:\r\n            start = 0\r\n        if start < 0:\r\n            start += _len\r\n        if start < 0:\r\n            start = 0\r\n\r\n        if stop is None:\r\n            stop = _len\r\n        if stop < 0:\r\n            stop += _len\r\n        if stop > _len:\r\n            stop = _len\r\n\r\n        if stop <= start:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        _maxes = self._maxes\r\n        key = self._key(value)\r\n        pos = bisect_left(_maxes, key)\r\n\r\n        if pos == len(_maxes):\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n        stop -= 1\r\n        _lists = self._lists\r\n        _keys = self._keys\r\n        idx = bisect_left(_keys[pos], key)\r\n        len_keys = len(_keys)\r\n        len_sublist = len(_keys[pos])\r\n\r\n        while True:\r\n            if _keys[pos][idx] != key:\r\n                raise ValueError('{0!r} is not in list'.format(value))\r\n            if _lists[pos][idx] == value:\r\n                loc = self._loc(pos, idx)\r\n                if start <= loc <= stop:\r\n                    return loc\r\n                elif loc > stop:\r\n                    break\r\n            idx += 1\r\n            if idx == len_sublist:\r\n                pos += 1\r\n                if pos == len_keys:\r\n                    raise ValueError('{0!r} is not in list'.format(value))\r\n                len_sublist = len(_keys[pos])\r\n                idx = 0\r\n\r\n        raise ValueError('{0!r} is not in list'.format(value))\r\n\r\n    def __add__(self, other):\r\n        \"\"\"Return new sorted-key list containing all values in both sequences.\r\n        ``skl.__add__(other)`` <==> ``skl + other``\r\n        Values in `other` do not need to be in sorted-key order.\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> from operator import neg\r\n        >>> skl1 = SortedKeyList([5, 4, 3], key=neg)\r\n        >>> skl2 = SortedKeyList([2, 1, 0], key=neg)\r\n        >>> skl1 + skl2\r\n        SortedKeyList([5, 4, 3, 2, 1, 0], key=<built-in function neg>)\r\n        :param other: other iterable\r\n        :return: new sorted-key list\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        values.extend(other)\r\n        return self.__class__(values, key=self._key)\r\n\r\n    __radd__ = __add__\r\n\r\n    def __mul__(self, num):\r\n        \"\"\"Return new sorted-key list with `num` shallow copies of values.\r\n        ``skl.__mul__(num)`` <==> ``skl * num``\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> from operator import neg\r\n        >>> skl = SortedKeyList([3, 2, 1], key=neg)\r\n        >>> skl * 2\r\n        SortedKeyList([3, 3, 2, 2, 1, 1], key=<built-in function neg>)\r\n        :param int num: count of shallow copies\r\n        :return: new sorted-key list\r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        return self.__class__(values, key=self._key)\r\n\r\n    def __reduce__(self):\r\n        values = reduce(iadd, self._lists, [])\r\n        return (type(self), (values, self.key))\r\n\r\n    @recursive_repr()\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted-key list.\r\n        ``skl.__repr__()`` <==> ``repr(skl)``\r\n        :return: string representation\r\n        \"\"\"\r\n        type_name = type(self).__name__\r\n        return '{0}({1!r}, key={2!r})'.format(type_name, list(self), self._key)\r\n\r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted-key list.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        try:\r\n            assert self._load >= 4\r\n            assert len(self._maxes) == len(self._lists) == len(self._keys)\r\n            assert self._len == sum(len(sublist) for sublist in self._lists)\r\n\r\n            # Check all sublists are sorted.\r\n\r\n            for sublist in self._keys:\r\n                for pos in range(1, len(sublist)):\r\n                    assert sublist[pos - 1] <= sublist[pos]\r\n\r\n            # Check beginning/end of sublists are sorted.\r\n\r\n            for pos in range(1, len(self._keys)):\r\n                assert self._keys[pos - 1][-1] <= self._keys[pos][0]\r\n\r\n            # Check _keys matches _key mapped to _lists.\r\n\r\n            for val_sublist, key_sublist in zip(self._lists, self._keys):\r\n                assert len(val_sublist) == len(key_sublist)\r\n                for val, key in zip(val_sublist, key_sublist):\r\n                    assert self._key(val) == key\r\n\r\n            # Check _maxes index is the last value of each sublist.\r\n\r\n            for pos in range(len(self._maxes)):\r\n                assert self._maxes[pos] == self._keys[pos][-1]\r\n\r\n            # Check sublist lengths are less than double load-factor.\r\n\r\n            double = self._load << 1\r\n            assert all(len(sublist) <= double for sublist in self._lists)\r\n\r\n            # Check sublist lengths are greater than half load-factor for all\r\n            # but the last sublist.\r\n\r\n            half = self._load >> 1\r\n            for pos in range(0, len(self._lists) - 1):\r\n                assert len(self._lists[pos]) >= half\r\n\r\n            if self._index:\r\n                assert self._len == self._index[0]\r\n                assert len(self._index) == self._offset + len(self._lists)\r\n\r\n                # Check index leaf nodes equal length of sublists.\r\n\r\n                for pos in range(len(self._lists)):\r\n                    leaf = self._index[self._offset + pos]\r\n                    assert leaf == len(self._lists[pos])\r\n\r\n                # Check index branch nodes are the sum of their children.\r\n\r\n                for pos in range(self._offset):\r\n                    child = (pos << 1) + 1\r\n                    if child >= len(self._index):\r\n                        assert self._index[pos] == 0\r\n                    elif child + 1 == len(self._index):\r\n                        assert self._index[pos] == self._index[child]\r\n                    else:\r\n                        child_sum = self._index[child] + self._index[child + 1]\r\n                        assert child_sum == self._index[pos]\r\n        except BaseException:\r\n            traceback.print_exc(file=sys.stdout)\r\n            print('len', self._len)\r\n            print('load', self._load)\r\n            print('offset', self._offset)\r\n            print('len_index', len(self._index))\r\n            print('index', self._index)\r\n            print('len_maxes', len(self._maxes))\r\n            print('maxes', self._maxes)\r\n            print('len_keys', len(self._keys))\r\n            print('keys', self._keys)\r\n            print('len_lists', len(self._lists))\r\n            print('lists', self._lists)\r\n            raise\r\n\r\n\r\nclass SortedSet(MutableSet, Sequence):\r\n    \"\"\"Sorted set is a sorted mutable set.\r\n    Sorted set values are maintained in sorted order. The design of sorted set\r\n    is simple: sorted set uses a set for set-operations and maintains a sorted\r\n    list of values.\r\n    Sorted set values must be hashable and comparable. The hash and total\r\n    ordering of values must not change while they are stored in the sorted set.\r\n    Mutable set methods:\r\n    * :func:`SortedSet.__contains__`\r\n    * :func:`SortedSet.__iter__`\r\n    * :func:`SortedSet.__len__`\r\n    * :func:`SortedSet.add`\r\n    * :func:`SortedSet.discard`\r\n    Sequence methods:\r\n    * :func:`SortedSet.__getitem__`\r\n    * :func:`SortedSet.__delitem__`\r\n    * :func:`SortedSet.__reversed__`\r\n    Methods for removing values:\r\n    * :func:`SortedSet.clear`\r\n    * :func:`SortedSet.pop`\r\n    * :func:`SortedSet.remove`\r\n    Set-operation methods:\r\n    * :func:`SortedSet.difference`\r\n    * :func:`SortedSet.difference_update`\r\n    * :func:`SortedSet.intersection`\r\n    * :func:`SortedSet.intersection_update`\r\n    * :func:`SortedSet.symmetric_difference`\r\n    * :func:`SortedSet.symmetric_difference_update`\r\n    * :func:`SortedSet.union`\r\n    * :func:`SortedSet.update`\r\n    Methods for miscellany:\r\n    * :func:`SortedSet.copy`\r\n    * :func:`SortedSet.count`\r\n    * :func:`SortedSet.__repr__`\r\n    * :func:`SortedSet._check`\r\n    Sorted list methods available:\r\n    * :func:`SortedList.bisect_left`\r\n    * :func:`SortedList.bisect_right`\r\n    * :func:`SortedList.index`\r\n    * :func:`SortedList.irange`\r\n    * :func:`SortedList.islice`\r\n    * :func:`SortedList._reset`\r\n    Additional sorted list methods available, if key-function used:\r\n    * :func:`SortedKeyList.bisect_key_left`\r\n    * :func:`SortedKeyList.bisect_key_right`\r\n    * :func:`SortedKeyList.irange_key`\r\n    Sorted set comparisons use subset and superset relations. Two sorted sets\r\n    are equal if and only if every element of each sorted set is contained in\r\n    the other (each is a subset of the other). A sorted set is less than\r\n    another sorted set if and only if the first sorted set is a proper subset\r\n    of the second sorted set (is a subset, but is not equal). A sorted set is\r\n    greater than another sorted set if and only if the first sorted set is a\r\n    proper superset of the second sorted set (is a superset, but is not equal).\r\n    \"\"\"\r\n\r\n    def __init__(self, iterable=None, key=None):\r\n        \"\"\"Initialize sorted set instance.\r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted set.\r\n        Optional `key` argument defines a callable that, like the `key`\r\n        argument to Python's `sorted` function, extracts a comparison key from\r\n        each value. The default, none, compares values directly.\r\n        Runtime complexity: `O(n*log(n))`\r\n        >>> ss = SortedSet([3, 1, 2, 5, 4])\r\n        >>> ss\r\n        SortedSet([1, 2, 3, 4, 5])\r\n        >>> from operator import neg\r\n        >>> ss = SortedSet([3, 1, 2, 5, 4], neg)\r\n        >>> ss\r\n        SortedSet([5, 4, 3, 2, 1], key=<built-in function neg>)\r\n        :param iterable: initial values (optional)\r\n        :param key: function used to extract comparison key (optional)\r\n        \"\"\"\r\n        self._key = key\r\n\r\n        # SortedSet._fromset calls SortedSet.__init__ after initializing the\r\n        # _set attribute. So only create a new set if the _set attribute is not\r\n        # already present.\r\n\r\n        if not hasattr(self, '_set'):\r\n            self._set = set()\r\n\r\n        self._list = SortedList(self._set, key=key)\r\n\r\n        # Expose some set methods publicly.\r\n\r\n        _set = self._set\r\n        self.isdisjoint = _set.isdisjoint\r\n        self.issubset = _set.issubset\r\n        self.issuperset = _set.issuperset\r\n\r\n        # Expose some sorted list methods publicly.\r\n\r\n        _list = self._list\r\n        self.bisect_left = _list.bisect_left\r\n        self.bisect = _list.bisect\r\n        self.bisect_right = _list.bisect_right\r\n        self.index = _list.index\r\n        self.irange = _list.irange\r\n        self.islice = _list.islice\r\n        self._reset = _list._reset\r\n\r\n        if key is not None:\r\n            self.bisect_key_left = _list.bisect_key_left\r\n            self.bisect_key_right = _list.bisect_key_right\r\n            self.bisect_key = _list.bisect_key\r\n            self.irange_key = _list.irange_key\r\n\r\n        if iterable is not None:\r\n            self._update(iterable)\r\n\r\n    @classmethod\r\n    def _fromset(cls, values, key=None):\r\n        \"\"\"Initialize sorted set from existing set.\r\n        Used internally by set operations that return a new set.\r\n        \"\"\"\r\n        sorted_set = object.__new__(cls)\r\n        sorted_set._set = values\r\n        sorted_set.__init__(key=key)\r\n        return sorted_set\r\n\r\n    @property\r\n    def key(self):\r\n        \"\"\"Function used to extract comparison key from values.\r\n        Sorted set compares values directly when the key function is none.\r\n        \"\"\"\r\n        return self._key\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted set.\r\n        ``ss.__contains__(value)`` <==> ``value in ss``\r\n        Runtime complexity: `O(1)`\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> 3 in ss\r\n        True\r\n        :param value: search for value in sorted set\r\n        :return: true if `value` in sorted set\r\n        \"\"\"\r\n        return value in self._set\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted set.\r\n        ``ss.__getitem__(index)`` <==> ``ss[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet('abcde')\r\n        >>> ss[2]\r\n        'c'\r\n        >>> ss[-1]\r\n        'e'\r\n        >>> ss[2:5]\r\n        ['c', 'd', 'e']\r\n        :param index: integer or slice for indexing\r\n        :return: value or list of values\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        return self._list[index]\r\n\r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted set.\r\n        ``ss.__delitem__(index)`` <==> ``del ss[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet('abcde')\r\n        >>> del ss[2]\r\n        >>> ss\r\n        SortedSet(['a', 'b', 'd', 'e'])\r\n        >>> del ss[:2]\r\n        >>> ss\r\n        SortedSet(['d', 'e'])\r\n        :param index: integer or slice for indexing\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        if isinstance(index, slice):\r\n            values = _list[index]\r\n            _set.difference_update(values)\r\n        else:\r\n            value = _list[index]\r\n            _set.remove(value)\r\n        del _list[index]\r\n\r\n    def __make_cmp(set_op, symbol, doc):\r\n        \"Make comparator method.\"\r\n\r\n        def comparer(self, other):\r\n            \"Compare method for sorted set and set.\"\r\n            if isinstance(other, SortedSet):\r\n                return set_op(self._set, other._set)\r\n            elif isinstance(other, Set):\r\n                return set_op(self._set, other)\r\n            return NotImplemented\r\n\r\n        set_op_name = set_op.__name__\r\n        comparer.__name__ = '__{0}__'.format(set_op_name)\r\n        doc_str = \"\"\"Return true if and only if sorted set is {0} `other`.\r\n        ``ss.__{1}__(other)`` <==> ``ss {2} other``\r\n        Comparisons use subset and superset semantics as with sets.\r\n        Runtime complexity: `O(n)`\r\n        :param other: `other` set\r\n        :return: true if sorted set is {0} `other`\r\n        \"\"\"\r\n        comparer.__doc__ = dedent(doc_str.format(doc, set_op_name, symbol))\r\n        return comparer\r\n\r\n    __eq__ = __make_cmp(eq, '==', 'equal to')\r\n    __ne__ = __make_cmp(ne, '!=', 'not equal to')\r\n    __lt__ = __make_cmp(lt, '<', 'a proper subset of')\r\n    __gt__ = __make_cmp(gt, '>', 'a proper superset of')\r\n    __le__ = __make_cmp(le, '<=', 'a subset of')\r\n    __ge__ = __make_cmp(ge, '>=', 'a superset of')\r\n    __make_cmp = staticmethod(__make_cmp)\r\n\r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted set.\r\n        ``ss.__len__()`` <==> ``len(ss)``\r\n        :return: size of sorted set\r\n        \"\"\"\r\n        return len(self._set)\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted set.\r\n        ``ss.__iter__()`` <==> ``iter(ss)``\r\n        Iterating the sorted set while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n        \"\"\"\r\n        return iter(self._list)\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted set.\r\n        ``ss.__reversed__()`` <==> ``reversed(ss)``\r\n        Iterating the sorted set while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n        \"\"\"\r\n        return reversed(self._list)\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted set.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet()\r\n        >>> ss.add(3)\r\n        >>> ss.add(1)\r\n        >>> ss.add(2)\r\n        >>> ss\r\n        SortedSet([1, 2, 3])\r\n        :param value: value to add to sorted set\r\n        \"\"\"\r\n        _set = self._set\r\n        if value not in _set:\r\n            _set.add(value)\r\n            self._list.add(value)\r\n\r\n    _add = add\r\n\r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted set.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        self._set.clear()\r\n        self._list.clear()\r\n\r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted set.\r\n        Runtime complexity: `O(n)`\r\n        :return: new sorted set\r\n        \"\"\"\r\n        return self._fromset(set(self._set), key=self._key)\r\n\r\n    __copy__ = copy\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted set.\r\n        Runtime complexity: `O(1)`\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.count(3)\r\n        1\r\n        :param value: value to count in sorted set\r\n        :return: count\r\n        \"\"\"\r\n        return 1 if value in self._set else 0\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted set if it is a member.\r\n        If `value` is not a member, do nothing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.discard(5)\r\n        >>> ss.discard(0)\r\n        >>> ss == set([1, 2, 3, 4])\r\n        True\r\n        :param value: `value` to discard from sorted set\r\n        \"\"\"\r\n        _set = self._set\r\n        if value in _set:\r\n            _set.remove(value)\r\n            self._list.remove(value)\r\n\r\n    _discard = discard\r\n\r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted set.\r\n        Raise :exc:`IndexError` if the sorted set is empty or index is out of\r\n        range.\r\n        Negative indices are supported.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet('abcde')\r\n        >>> ss.pop()\r\n        'e'\r\n        >>> ss.pop(2)\r\n        'c'\r\n        >>> ss\r\n        SortedSet(['a', 'b', 'd'])\r\n        :param int index: index of value (default -1)\r\n        :return: value\r\n        :raises IndexError: if index is out of range\r\n        \"\"\"\r\n        # pylint: disable=arguments-differ\r\n        value = self._list.pop(index)\r\n        self._set.remove(value)\r\n        return value\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted set; `value` must be a member.\r\n        If `value` is not a member, raise :exc:`KeyError`.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.remove(5)\r\n        >>> ss == set([1, 2, 3, 4])\r\n        True\r\n        >>> ss.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        KeyError: 0\r\n        :param value: `value` to remove from sorted set\r\n        :raises KeyError: if `value` is not in sorted set\r\n        \"\"\"\r\n        self._set.remove(value)\r\n        self._list.remove(value)\r\n\r\n    def difference(self, *iterables):\r\n        \"\"\"Return the difference of two or more sets as a new sorted set.\r\n        The `difference` method also corresponds to operator ``-``.\r\n        ``ss.__sub__(iterable)`` <==> ``ss - iterable``\r\n        The difference is all values that are in this sorted set but not the\r\n        other `iterables`.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.difference([4, 5, 6, 7])\r\n        SortedSet([1, 2, 3])\r\n        :param iterables: iterable arguments\r\n        :return: new sorted set\r\n        \"\"\"\r\n        diff = self._set.difference(*iterables)\r\n        return self._fromset(diff, key=self._key)\r\n\r\n    __sub__ = difference\r\n\r\n    def difference_update(self, *iterables):\r\n        \"\"\"Remove all values of `iterables` from this sorted set.\r\n        The `difference_update` method also corresponds to operator ``-=``.\r\n        ``ss.__isub__(iterable)`` <==> ``ss -= iterable``\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> _ = ss.difference_update([4, 5, 6, 7])\r\n        >>> ss\r\n        SortedSet([1, 2, 3])\r\n        :param iterables: iterable arguments\r\n        :return: itself\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        values = set(chain(*iterables))\r\n        if (4 * len(values)) > len(_set):\r\n            _set.difference_update(values)\r\n            _list.clear()\r\n            _list.update(_set)\r\n        else:\r\n            _discard = self._discard\r\n            for value in values:\r\n                _discard(value)\r\n        return self\r\n\r\n    __isub__ = difference_update\r\n\r\n    def intersection(self, *iterables):\r\n        \"\"\"Return the intersection of two or more sets as a new sorted set.\r\n        The `intersection` method also corresponds to operator ``&``.\r\n        ``ss.__and__(iterable)`` <==> ``ss & iterable``\r\n        The intersection is all values that are in this sorted set and each of\r\n        the other `iterables`.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.intersection([4, 5, 6, 7])\r\n        SortedSet([4, 5])\r\n        :param iterables: iterable arguments\r\n        :return: new sorted set\r\n        \"\"\"\r\n        intersect = self._set.intersection(*iterables)\r\n        return self._fromset(intersect, key=self._key)\r\n\r\n    __and__ = intersection\r\n    __rand__ = __and__\r\n\r\n    def intersection_update(self, *iterables):\r\n        \"\"\"Update the sorted set with the intersection of `iterables`.\r\n        The `intersection_update` method also corresponds to operator ``&=``.\r\n        ``ss.__iand__(iterable)`` <==> ``ss &= iterable``\r\n        Keep only values found in itself and all `iterables`.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> _ = ss.intersection_update([4, 5, 6, 7])\r\n        >>> ss\r\n        SortedSet([4, 5])\r\n        :param iterables: iterable arguments\r\n        :return: itself\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        _set.intersection_update(*iterables)\r\n        _list.clear()\r\n        _list.update(_set)\r\n        return self\r\n\r\n    __iand__ = intersection_update\r\n\r\n    def symmetric_difference(self, other):\r\n        \"\"\"Return the symmetric difference with `other` as a new sorted set.\r\n        The `symmetric_difference` method also corresponds to operator ``^``.\r\n        ``ss.__xor__(other)`` <==> ``ss ^ other``\r\n        The symmetric difference is all values tha are in exactly one of the\r\n        sets.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.symmetric_difference([4, 5, 6, 7])\r\n        SortedSet([1, 2, 3, 6, 7])\r\n        :param other: `other` iterable\r\n        :return: new sorted set\r\n        \"\"\"\r\n        diff = self._set.symmetric_difference(other)\r\n        return self._fromset(diff, key=self._key)\r\n\r\n    __xor__ = symmetric_difference\r\n    __rxor__ = __xor__\r\n\r\n    def symmetric_difference_update(self, other):\r\n        \"\"\"Update the sorted set with the symmetric difference with `other`.\r\n        The `symmetric_difference_update` method also corresponds to operator\r\n        ``^=``.\r\n        ``ss.__ixor__(other)`` <==> ``ss ^= other``\r\n        Keep only values found in exactly one of itself and `other`.\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> _ = ss.symmetric_difference_update([4, 5, 6, 7])\r\n        >>> ss\r\n        SortedSet([1, 2, 3, 6, 7])\r\n        :param other: `other` iterable\r\n        :return: itself\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        _set.symmetric_difference_update(other)\r\n        _list.clear()\r\n        _list.update(_set)\r\n        return self\r\n\r\n    __ixor__ = symmetric_difference_update\r\n\r\n    def union(self, *iterables):\r\n        \"\"\"Return new sorted set with values from itself and all `iterables`.\r\n        The `union` method also corresponds to operator ``|``.\r\n        ``ss.__or__(iterable)`` <==> ``ss | iterable``\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> ss.union([4, 5, 6, 7])\r\n        SortedSet([1, 2, 3, 4, 5, 6, 7])\r\n        :param iterables: iterable arguments\r\n        :return: new sorted set\r\n        \"\"\"\r\n        return self.__class__(chain(iter(self), *iterables), key=self._key)\r\n\r\n    __or__ = union\r\n    __ror__ = __or__\r\n\r\n    def update(self, *iterables):\r\n        \"\"\"Update the sorted set adding values from all `iterables`.\r\n        The `update` method also corresponds to operator ``|=``.\r\n        ``ss.__ior__(iterable)`` <==> ``ss |= iterable``\r\n        >>> ss = SortedSet([1, 2, 3, 4, 5])\r\n        >>> _ = ss.update([4, 5, 6, 7])\r\n        >>> ss\r\n        SortedSet([1, 2, 3, 4, 5, 6, 7])\r\n        :param iterables: iterable arguments\r\n        :return: itself\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        values = set(chain(*iterables))\r\n        if (4 * len(values)) > len(_set):\r\n            _list = self._list\r\n            _set.update(values)\r\n            _list.clear()\r\n            _list.update(_set)\r\n        else:\r\n            _add = self._add\r\n            for value in values:\r\n                _add(value)\r\n        return self\r\n\r\n    __ior__ = update\r\n    _update = update\r\n\r\n    def __reduce__(self):\r\n        \"\"\"Support for pickle.\r\n        The tricks played with exposing methods in :func:`SortedSet.__init__`\r\n        confuse pickle so customize the reducer.\r\n        \"\"\"\r\n        return (type(self), (self._set, self._key))\r\n\r\n    @recursive_repr()\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted set.\r\n        ``ss.__repr__()`` <==> ``repr(ss)``\r\n        :return: string representation\r\n        \"\"\"\r\n        _key = self._key\r\n        key = '' if _key is None else ', key={0!r}'.format(_key)\r\n        type_name = type(self).__name__\r\n        return '{0}({1!r}{2})'.format(type_name, list(self), key)\r\n\r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted set.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        _set = self._set\r\n        _list = self._list\r\n        _list._check()\r\n        assert len(_set) == len(_list)\r\n        assert all(value in _set for value in _list)\r\n\r\n\r\nclass SortedDict(dict):\r\n    \"\"\"Sorted dict is a sorted mutable mapping.\r\n    Sorted dict keys are maintained in sorted order. The design of sorted dict\r\n    is simple: sorted dict inherits from dict to store items and maintains a\r\n    sorted list of keys.\r\n    Sorted dict keys must be hashable and comparable. The hash and total\r\n    ordering of keys must not change while they are stored in the sorted dict.\r\n    Mutable mapping methods:\r\n    * :func:`SortedDict.__getitem__` (inherited from dict)\r\n    * :func:`SortedDict.__setitem__`\r\n    * :func:`SortedDict.__delitem__`\r\n    * :func:`SortedDict.__iter__`\r\n    * :func:`SortedDict.__len__` (inherited from dict)\r\n    Methods for adding items:\r\n    * :func:`SortedDict.setdefault`\r\n    * :func:`SortedDict.update`\r\n    Methods for removing items:\r\n    * :func:`SortedDict.clear`\r\n    * :func:`SortedDict.pop`\r\n    * :func:`SortedDict.popitem`\r\n    Methods for looking up items:\r\n    * :func:`SortedDict.__contains__` (inherited from dict)\r\n    * :func:`SortedDict.get` (inherited from dict)\r\n    * :func:`SortedDict.peekitem`\r\n    Methods for views:\r\n    * :func:`SortedDict.keys`\r\n    * :func:`SortedDict.items`\r\n    * :func:`SortedDict.values`\r\n    Methods for miscellany:\r\n    * :func:`SortedDict.copy`\r\n    * :func:`SortedDict.fromkeys`\r\n    * :func:`SortedDict.__reversed__`\r\n    * :func:`SortedDict.__eq__` (inherited from dict)\r\n    * :func:`SortedDict.__ne__` (inherited from dict)\r\n    * :func:`SortedDict.__repr__`\r\n    * :func:`SortedDict._check`\r\n    Sorted list methods available (applies to keys):\r\n    * :func:`SortedList.bisect_left`\r\n    * :func:`SortedList.bisect_right`\r\n    * :func:`SortedList.count`\r\n    * :func:`SortedList.index`\r\n    * :func:`SortedList.irange`\r\n    * :func:`SortedList.islice`\r\n    * :func:`SortedList._reset`\r\n    Additional sorted list methods available, if key-function used:\r\n    * :func:`SortedKeyList.bisect_key_left`\r\n    * :func:`SortedKeyList.bisect_key_right`\r\n    * :func:`SortedKeyList.irange_key`\r\n    Sorted dicts may only be compared for equality and inequality.\r\n    \"\"\"\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        \"\"\"Initialize sorted dict instance.\r\n        Optional key-function argument defines a callable that, like the `key`\r\n        argument to the built-in `sorted` function, extracts a comparison key\r\n        from each dictionary key. If no function is specified, the default\r\n        compares the dictionary keys directly. The key-function argument must\r\n        be provided as a positional argument and must come before all other\r\n        arguments.\r\n        Optional iterable argument provides an initial sequence of pairs to\r\n        initialize the sorted dict. Each pair in the sequence defines the key\r\n        and corresponding value. If a key is seen more than once, the last\r\n        value associated with it is stored in the new sorted dict.\r\n        Optional mapping argument provides an initial mapping of items to\r\n        initialize the sorted dict.\r\n        If keyword arguments are given, the keywords themselves, with their\r\n        associated values, are added as items to the dictionary. If a key is\r\n        specified both in the positional argument and as a keyword argument,\r\n        the value associated with the keyword is stored in the\r\n        sorted dict.\r\n        Sorted dict keys must be hashable, per the requirement for Python's\r\n        dictionaries. Keys (or the result of the key-function) must also be\r\n        comparable, per the requirement for sorted lists.\r\n        >>> d = {'alpha': 1, 'beta': 2}\r\n        >>> SortedDict([('alpha', 1), ('beta', 2)]) == d\r\n        True\r\n        >>> SortedDict({'alpha': 1, 'beta': 2}) == d\r\n        True\r\n        >>> SortedDict(alpha=1, beta=2) == d\r\n        True\r\n        \"\"\"\r\n        if args and (args[0] is None or callable(args[0])):\r\n            _key = self._key = args[0]\r\n            args = args[1:]\r\n        else:\r\n            _key = self._key = None\r\n\r\n        self._list = SortedList(key=_key)\r\n\r\n        # Reaching through ``self._list`` repeatedly adds unnecessary overhead\r\n        # so cache references to sorted list methods.\r\n\r\n        _list = self._list\r\n        self._list_add = _list.add\r\n        self._list_clear = _list.clear\r\n        self._list_iter = _list.__iter__\r\n        self._list_reversed = _list.__reversed__\r\n        self._list_pop = _list.pop\r\n        self._list_remove = _list.remove\r\n        self._list_update = _list.update\r\n\r\n        # Expose some sorted list methods publicly.\r\n\r\n        self.bisect_left = _list.bisect_left\r\n        self.bisect = _list.bisect_right\r\n        self.bisect_right = _list.bisect_right\r\n        self.index = _list.index\r\n        self.irange = _list.irange\r\n        self.islice = _list.islice\r\n        self._reset = _list._reset\r\n\r\n        if _key is not None:\r\n            self.bisect_key_left = _list.bisect_key_left\r\n            self.bisect_key_right = _list.bisect_key_right\r\n            self.bisect_key = _list.bisect_key\r\n            self.irange_key = _list.irange_key\r\n\r\n        self._update(*args, **kwargs)\r\n\r\n    @property\r\n    def key(self):\r\n        \"\"\"Function used to extract comparison key from keys.\r\n        Sorted dict compares keys directly when the key function is none.\r\n        \"\"\"\r\n        return self._key\r\n\r\n    @property\r\n    def iloc(self):\r\n        \"\"\"Cached reference of sorted keys view.\r\n        Deprecated in version 2 of Sorted Containers. Use\r\n        :func:`SortedDict.keys` instead.\r\n        \"\"\"\r\n        # pylint: disable=attribute-defined-outside-init\r\n        try:\r\n            return self._iloc\r\n        except AttributeError:\r\n            warnings.warn(\r\n                'sorted_dict.iloc is deprecated.'\r\n                ' Use SortedDict.keys() instead.',\r\n                DeprecationWarning,\r\n                stacklevel=2,\r\n            )\r\n            _iloc = self._iloc = SortedKeysView(self)\r\n            return _iloc\r\n\r\n    def clear(self):\r\n        \"\"\"Remove all items from sorted dict.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        dict.clear(self)\r\n        self._list_clear()\r\n\r\n    def __delitem__(self, key):\r\n        \"\"\"Remove item from sorted dict identified by `key`.\r\n        ``sd.__delitem__(key)`` <==> ``del sd[key]``\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> del sd['b']\r\n        >>> sd\r\n        SortedDict({'a': 1, 'c': 3})\r\n        >>> del sd['z']\r\n        Traceback (most recent call last):\r\n          ...\r\n        KeyError: 'z'\r\n        :param key: `key` for item lookup\r\n        :raises KeyError: if key not found\r\n        \"\"\"\r\n        dict.__delitem__(self, key)\r\n        self._list_remove(key)\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the keys of the sorted dict.\r\n        ``sd.__iter__()`` <==> ``iter(sd)``\r\n        Iterating the sorted dict while adding or deleting items may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all keys.\r\n        \"\"\"\r\n        return self._list_iter()\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the keys of the sorted dict.\r\n        ``sd.__reversed__()`` <==> ``reversed(sd)``\r\n        Iterating the sorted dict while adding or deleting items may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all keys.\r\n        \"\"\"\r\n        return self._list_reversed()\r\n\r\n    def __setitem__(self, key, value):\r\n        \"\"\"Store item in sorted dict with `key` and corresponding `value`.\r\n        ``sd.__setitem__(key, value)`` <==> ``sd[key] = value``\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict()\r\n        >>> sd['c'] = 3\r\n        >>> sd['a'] = 1\r\n        >>> sd['b'] = 2\r\n        >>> sd\r\n        SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        :param key: key for item\r\n        :param value: value for item\r\n        \"\"\"\r\n        if key not in self:\r\n            self._list_add(key)\r\n        dict.__setitem__(self, key, value)\r\n\r\n    _setitem = __setitem__\r\n\r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted dict.\r\n        Runtime complexity: `O(n)`\r\n        :return: new sorted dict\r\n        \"\"\"\r\n        return self.__class__(self._key, self.items())\r\n\r\n    __copy__ = copy\r\n\r\n    @classmethod\r\n    def fromkeys(cls, iterable, value=None):\r\n        \"\"\"Return a new sorted dict initailized from `iterable` and `value`.\r\n        Items in the sorted dict have keys from `iterable` and values equal to\r\n        `value`.\r\n        Runtime complexity: `O(n*log(n))`\r\n        :return: new sorted dict\r\n        \"\"\"\r\n        return cls((key, value) for key in iterable)\r\n\r\n    def keys(self):\r\n        \"\"\"Return new sorted keys view of the sorted dict's keys.\r\n        See :class:`SortedKeysView` for details.\r\n        :return: new sorted keys view\r\n        \"\"\"\r\n        return SortedKeysView(self)\r\n\r\n    def items(self):\r\n        \"\"\"Return new sorted items view of the sorted dict's items.\r\n        See :class:`SortedItemsView` for details.\r\n        :return: new sorted items view\r\n        \"\"\"\r\n        return SortedItemsView(self)\r\n\r\n    def values(self):\r\n        \"\"\"Return new sorted values view of the sorted dict's values.\r\n        See :class:`SortedValuesView` for details.\r\n        :return: new sorted values view\r\n        \"\"\"\r\n        return SortedValuesView(self)\r\n\r\n    class _NotGiven(object):\r\n        # pylint: disable=too-few-public-methods\r\n        def __repr__(self):\r\n            return '<not-given>'\r\n\r\n    __not_given = _NotGiven()\r\n\r\n    def pop(self, key, default=__not_given):\r\n        \"\"\"Remove and return value for item identified by `key`.\r\n        If the `key` is not found then return `default` if given. If `default`\r\n        is not given then raise :exc:`KeyError`.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> sd.pop('c')\r\n        3\r\n        >>> sd.pop('z', 26)\r\n        26\r\n        >>> sd.pop('y')\r\n        Traceback (most recent call last):\r\n          ...\r\n        KeyError: 'y'\r\n        :param key: `key` for item\r\n        :param default: `default` value if key not found (optional)\r\n        :return: value for item\r\n        :raises KeyError: if `key` not found and `default` not given\r\n        \"\"\"\r\n        if key in self:\r\n            self._list_remove(key)\r\n            return dict.pop(self, key)\r\n        else:\r\n            if default is self.__not_given:\r\n                raise KeyError(key)\r\n            return default\r\n\r\n    def popitem(self, index=-1):\r\n        \"\"\"Remove and return ``(key, value)`` pair at `index` from sorted dict.\r\n        Optional argument `index` defaults to -1, the last item in the sorted\r\n        dict. Specify ``index=0`` for the first item in the sorted dict.\r\n        If the sorted dict is empty, raises :exc:`KeyError`.\r\n        If the `index` is out of range, raises :exc:`IndexError`.\r\n        Runtime complexity: `O(log(n))`\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> sd.popitem()\r\n        ('c', 3)\r\n        >>> sd.popitem(0)\r\n        ('a', 1)\r\n        >>> sd.popitem(100)\r\n        Traceback (most recent call last):\r\n          ...\r\n        IndexError: list index out of range\r\n        :param int index: `index` of item (default -1)\r\n        :return: key and value pair\r\n        :raises KeyError: if sorted dict is empty\r\n        :raises IndexError: if `index` out of range\r\n        \"\"\"\r\n        if not self:\r\n            raise KeyError('popitem(): dictionary is empty')\r\n\r\n        key = self._list_pop(index)\r\n        value = dict.pop(self, key)\r\n        return (key, value)\r\n\r\n    def peekitem(self, index=-1):\r\n        \"\"\"Return ``(key, value)`` pair at `index` in sorted dict.\r\n        Optional argument `index` defaults to -1, the last item in the sorted\r\n        dict. Specify ``index=0`` for the first item in the sorted dict.\r\n        Unlike :func:`SortedDict.popitem`, the sorted dict is not modified.\r\n        If the `index` is out of range, raises :exc:`IndexError`.\r\n        Runtime complexity: `O(log(n))`\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> sd.peekitem()\r\n        ('c', 3)\r\n        >>> sd.peekitem(0)\r\n        ('a', 1)\r\n        >>> sd.peekitem(100)\r\n        Traceback (most recent call last):\r\n          ...\r\n        IndexError: list index out of range\r\n        :param int index: index of item (default -1)\r\n        :return: key and value pair\r\n        :raises IndexError: if `index` out of range\r\n        \"\"\"\r\n        key = self._list[index]\r\n        return key, self[key]\r\n\r\n    def setdefault(self, key, default=None):\r\n        \"\"\"Return value for item identified by `key` in sorted dict.\r\n        If `key` is in the sorted dict then return its value. If `key` is not\r\n        in the sorted dict then insert `key` with value `default` and return\r\n        `default`.\r\n        Optional argument `default` defaults to none.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict()\r\n        >>> sd.setdefault('a', 1)\r\n        1\r\n        >>> sd.setdefault('a', 10)\r\n        1\r\n        >>> sd\r\n        SortedDict({'a': 1})\r\n        :param key: key for item\r\n        :param default: value for item (default None)\r\n        :return: value for item identified by `key`\r\n        \"\"\"\r\n        if key in self:\r\n            return self[key]\r\n        dict.__setitem__(self, key, default)\r\n        self._list_add(key)\r\n        return default\r\n\r\n    def update(self, *args, **kwargs):\r\n        \"\"\"Update sorted dict with items from `args` and `kwargs`.\r\n        Overwrites existing items.\r\n        Optional arguments `args` and `kwargs` may be a mapping, an iterable of\r\n        pairs or keyword arguments. See :func:`SortedDict.__init__` for\r\n        details.\r\n        :param args: mapping or iterable of pairs\r\n        :param kwargs: keyword arguments mapping\r\n        \"\"\"\r\n        if not self:\r\n            dict.update(self, *args, **kwargs)\r\n            self._list_update(dict.__iter__(self))\r\n            return\r\n\r\n        if not kwargs and len(args) == 1 and isinstance(args[0], dict):\r\n            pairs = args[0]\r\n        else:\r\n            pairs = dict(*args, **kwargs)\r\n\r\n        if (10 * len(pairs)) > len(self):\r\n            dict.update(self, pairs)\r\n            self._list_clear()\r\n            self._list_update(dict.__iter__(self))\r\n        else:\r\n            for key in pairs:\r\n                self._setitem(key, pairs[key])\r\n\r\n    _update = update\r\n\r\n    def __reduce__(self):\r\n        \"\"\"Support for pickle.\r\n        The tricks played with caching references in\r\n        :func:`SortedDict.__init__` confuse pickle so customize the reducer.\r\n        \"\"\"\r\n        items = dict.copy(self)\r\n        return (type(self), (self._key, items))\r\n\r\n    @recursive_repr()\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted dict.\r\n        ``sd.__repr__()`` <==> ``repr(sd)``\r\n        :return: string representation\r\n        \"\"\"\r\n        _key = self._key\r\n        type_name = type(self).__name__\r\n        key_arg = '' if _key is None else '{0!r}, '.format(_key)\r\n        item_format = '{0!r}: {1!r}'.format\r\n        items = ', '.join(item_format(key, self[key]) for key in self._list)\r\n        return '{0}({1}{{{2}}})'.format(type_name, key_arg, items)\r\n\r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted dict.\r\n        Runtime complexity: `O(n)`\r\n        \"\"\"\r\n        _list = self._list\r\n        _list._check()\r\n        assert len(self) == len(_list)\r\n        assert all(key in self for key in _list)\r\n\r\n\r\ndef _view_delitem(self, index):\r\n    \"\"\"Remove item at `index` from sorted dict.\r\n    ``view.__delitem__(index)`` <==> ``del view[index]``\r\n    Supports slicing.\r\n    Runtime complexity: `O(log(n))` -- approximate.\r\n    >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n    >>> view = sd.keys()\r\n    >>> del view[0]\r\n    >>> sd\r\n    SortedDict({'b': 2, 'c': 3})\r\n    >>> del view[-1]\r\n    >>> sd\r\n    SortedDict({'b': 2})\r\n    >>> del view[:]\r\n    >>> sd\r\n    SortedDict({})\r\n    :param index: integer or slice for indexing\r\n    :raises IndexError: if index out of range\r\n    \"\"\"\r\n    _mapping = self._mapping\r\n    _list = _mapping._list\r\n    dict_delitem = dict.__delitem__\r\n    if isinstance(index, slice):\r\n        keys = _list[index]\r\n        del _list[index]\r\n        for key in keys:\r\n            dict_delitem(_mapping, key)\r\n    else:\r\n        key = _list.pop(index)\r\n        dict_delitem(_mapping, key)\r\n\r\n\r\nclass SortedKeysView(KeysView, Sequence):\r\n    \"\"\"Sorted keys view is a dynamic view of the sorted dict's keys.\r\n    When the sorted dict's keys change, the view reflects those changes.\r\n    The keys view implements the set and sequence abstract base classes.\r\n    \"\"\"\r\n    __slots__ = ()\r\n\r\n    @classmethod\r\n    def _from_iterable(cls, it):\r\n        return SortedSet(it)\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup key at `index` in sorted keys views.\r\n        ``skv.__getitem__(index)`` <==> ``skv[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> skv = sd.keys()\r\n        >>> skv[0]\r\n        'a'\r\n        >>> skv[-1]\r\n        'c'\r\n        >>> skv[:]\r\n        ['a', 'b', 'c']\r\n        >>> skv[100]\r\n        Traceback (most recent call last):\r\n          ...\r\n        IndexError: list index out of range\r\n        :param index: integer or slice for indexing\r\n        :return: key or list of keys\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        return self._mapping._list[index]\r\n\r\n    __delitem__ = _view_delitem\r\n\r\n\r\nclass SortedItemsView(ItemsView, Sequence):\r\n    \"\"\"Sorted items view is a dynamic view of the sorted dict's items.\r\n    When the sorted dict's items change, the view reflects those changes.\r\n    The items view implements the set and sequence abstract base classes.\r\n    \"\"\"\r\n    __slots__ = ()\r\n\r\n    @classmethod\r\n    def _from_iterable(cls, it):\r\n        return SortedSet(it)\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup item at `index` in sorted items view.\r\n        ``siv.__getitem__(index)`` <==> ``siv[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> siv = sd.items()\r\n        >>> siv[0]\r\n        ('a', 1)\r\n        >>> siv[-1]\r\n        ('c', 3)\r\n        >>> siv[:]\r\n        [('a', 1), ('b', 2), ('c', 3)]\r\n        >>> siv[100]\r\n        Traceback (most recent call last):\r\n          ...\r\n        IndexError: list index out of range\r\n        :param index: integer or slice for indexing\r\n        :return: item or list of items\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        _mapping = self._mapping\r\n        _mapping_list = _mapping._list\r\n\r\n        if isinstance(index, slice):\r\n            keys = _mapping_list[index]\r\n            return [(key, _mapping[key]) for key in keys]\r\n\r\n        key = _mapping_list[index]\r\n        return key, _mapping[key]\r\n\r\n    __delitem__ = _view_delitem\r\n\r\n\r\nclass SortedValuesView(ValuesView, Sequence):\r\n    \"\"\"Sorted values view is a dynamic view of the sorted dict's values.\r\n    When the sorted dict's values change, the view reflects those changes.\r\n    The values view implements the sequence abstract base class.\r\n    \"\"\"\r\n    __slots__ = ()\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted values view.\r\n        ``siv.__getitem__(index)`` <==> ``siv[index]``\r\n        Supports slicing.\r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n        >>> sd = SortedDict({'a': 1, 'b': 2, 'c': 3})\r\n        >>> svv = sd.values()\r\n        >>> svv[0]\r\n        1\r\n        >>> svv[-1]\r\n        3\r\n        >>> svv[:]\r\n        [1, 2, 3]\r\n        >>> svv[100]\r\n        Traceback (most recent call last):\r\n          ...\r\n        IndexError: list index out of range\r\n        :param index: integer or slice for indexing\r\n        :return: value or list of values\r\n        :raises IndexError: if index out of range\r\n        \"\"\"\r\n        _mapping = self._mapping\r\n        _mapping_list = _mapping._list\r\n\r\n        if isinstance(index, slice):\r\n            keys = _mapping_list[index]\r\n            return [_mapping[key] for key in keys]\r\n\r\n        key = _mapping_list[index]\r\n        return _mapping[key]\r\n\r\n    __delitem__ = _view_delitem\r\n# Copyright 2014 - 2019 Grant Jenks\r\n# https://github.com/grantjenks/python-sortedcontainers",
		"description": "平衡二分木のやつ"
	},
	"入力高速化": {
		"prefix": "speedingup",
		"body": "import sys\r\ninput = sys.stdin.readline\r\n",
		"description": "入力高速化"
	},
	"chain": {
		"prefix": "chain",
		"body": "from itertools import chain\r\n# max(chain.from_iterable(dp)) # で二次元の最大値が取れるよ",
		"description": "chain"
	},
	"scanf": {
		"prefix": "scanf",
		"body": "from libc.stdio cimport scanf, printf",
		"description": "scanf, printf"
	},
	"speeding_up_string": {
		"prefix": "speedingupstr",
		"body": "import sys\r\ndef input(): return sys.stdin.readline().rstrip()  # 文字列\r\n",
		"description": "入力高速化"
	}
}